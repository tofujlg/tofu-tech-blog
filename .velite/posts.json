[
  {
    "slug": "blog/2022/20220825-Obsidian-workflow",
    "title": "M1 MacbookでのGatsby開発",
    "date": "2022-08-20T00:00:00.000Z",
    "tags": [
      "Obsidian"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(i){const l={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...i.components};return r(e,{children:[n(l.h2,{id:\"ラップトップ買い換えたら\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ラップトップ買い換えたら\",children:\"ラップトップ買い換えたら\"})}),\"\\n\",n(l.p,{children:\"M1 Macbookに買い換えたし、ブログでも書こうかと思い。\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-shell\",children:\"npm run develop\\n\"})}),\"\\n\",n(l.p,{children:\"すると\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-shell\",children:\"“ERR! sharp Prebuilt libvips 8.10.5 binaries are not yet available for darwin-arm64v8”\\n\"})}),\"\\n\",n(l.p,{children:\"というエラーをいただいた。\"}),\"\\n\",n(l.p,{children:\"ググって同じ状況の記事を発見。\"}),\"\\n\",r(l.ul,{children:[\"\\n\",n(l.li,{children:n(l.a,{href:\"https://joseph-pereniguez.medium.com/how-to-fix-err-sharp-prebuilt-libvips-8-10-5-binaries-are-not-yet-available-for-darwin-arm64v8-1d29d538e932\",children:\"How to fix “ERR! sharp Prebuilt libvips 8.10.5 binaries are not yet available for darwin-arm64v8”\"})}),\"\\n\"]}),\"\\n\",r(l.p,{children:[\"こちらを参考にしながら、エラーと格闘すると、sharpの問題を解決したっぽいが、今度は\",n(l.code,{children:\"react-icons\"}),\"で一生止まる問題発生。\"]}),\"\\n\",r(l.ul,{children:[\"\\n\",n(l.li,{children:n(l.a,{href:\"https://github.com/npm/cli/issues/2306\",children:\"npm stuck too long on apple new m1 computer #2306\"})}),\"\\n\"]}),\"\\n\",n(l.p,{children:\"こちらの記事を参考にしてnodeのバージョンを14にしてみた。\"}),\"\\n\",n(l.p,{children:\"これで解決しました。\"}),\"\\n\",n(l.p,{children:\"これで環境構築されたのでブログ記事を積極的に書いていきたい。\"})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2022/20220825-Obsidian-workflow"
  },
  {
    "slug": "blog/2024/0110",
    "title": "どんなエンジニアになりたいだろうか",
    "date": "2024-01-16T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(r){const l={a:\"a\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",ul:\"ul\",...r.components};return i(n,{children:[e(l.h2,{id:\"main\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#main\",children:\"Main\"})}),\"\\n\",e(l.p,{children:\"「どんなエンジニアになりたいだろうか 」\"}),\"\\n\",e(l.p,{children:\"最近、この質問をよく自分に問う。\"}),\"\\n\",e(l.p,{children:\"エンジニアになる前は「職業エンジニアになる」というハッキリとした目標があって、それに応じた小さな具体的な目標・作業内容を設定することができた。\"}),\"\\n\",e(l.p,{children:\"例えば\"}),\"\\n\",i(l.ul,{children:[\"\\n\",e(l.li,{children:\"JavaScriptのudemyコースを終わらせること\"}),\"\\n\",e(l.li,{children:\"やっていきたい領域の技術を使用したポートフォリオ作品を作ること\"}),\"\\n\",e(l.li,{children:\"ブログやレジュメサイトを公開して、自分能力のアピールをすること\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:\"これらは、未経験からエンジニアに転職する際のノウハウとしてネットでよく言われていることで、僕はこの手順を踏むことで、実際に転職することができた。\"}),\"\\n\",e(l.p,{children:\"晴れて職業エンジニアになってからも、暫くは具体的な目標が僕の前に置かれているようだった。プロジェクトにアサインされて、タスクを振られても最初の数カ月は上手くこなすことができなかったが、その時もタスクをこなせるようになるためには何をしたらいいのかは明確にわかっていた。  それは先輩エンジニアの作業する姿を見て学ぶことだった。\"}),\"\\n\",e(l.p,{children:\"実際にそうすることで、徐々にチームに貢献出来るようになっていった。今では、自分はある程度戦力に数えられていると思っている。\"}),\"\\n\",e(l.p,{children:\"現状を整理すると、ようするに日々の業務をこなしていく中で少し余裕が出てきたのだと思う。もちろん全てを完璧にできているとは思わないが、最初の頃のような切羽詰まった感じはない。それで、新たな目標を設定したいと思っているのだと思う。\"}),\"\\n\",e(l.h2,{id:\"目標にするエンジニア\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#目標にするエンジニア\",children:\"目標にするエンジニア\"})}),\"\\n\",e(l.p,{children:\"インターネットにはすごいエンジニアが溢れている。そのなかでも自分が日々そういったツールに助けられているからだろうか「エンジニアのためのエンジニア」に憧れを感じるようになってきている。\"}),\"\\n\",e(l.p,{children:\"例えば、FFmpegの作者のFabrice BellardはQEMUの作者でもあると言うことを知ってびっくりした。どの業界にも「こんな能力のある人がいるのか」と思う人がいるものである。\"}),\"\\n\",e(l.p,{children:\"それから、Reduxの作者のDan Abramovさんもすごいと思う。最近仕事でReduxにお世話になっているし、彼はブログ記事やYoutubeなどのメディアの露出が多いのでインスピレーションをいただいている。\"}),\"\\n\",e(l.p,{children:\"それからGNUプロジェクトのRichard Stallman。最近LinuxのCoreutilにお世話になっている且つ、フリーソフトウェアのために尽力しているのがカッコいいと思う。\"}),\"\\n\",e(l.p,{children:\"「自分がいきなり彼らのようになれるか」と問われればそりゃいきなりは無理な訳で、けと、目標として脳裏にある。 バスケをする少年がNBAの選手に憧れるような気持ちを抱いている。\"}),\"\\n\",e(l.h3,{id:\"ユーザーのためのエンジニア\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ユーザーのためのエンジニア\",children:\"ユーザーのためのエンジニア\"})}),\"\\n\",e(l.p,{children:\"では「優れたユーザーのためのエンジニアになる」といった目標はどうだろうか。それは要するに優れたユーザーのためのソフトウェアをつくる人、ということだろう。\"}),\"\\n\",e(l.p,{children:\"僕はソフトウェアの開発者でもありながら、ソフトウェアのユーザーでもあることを最近はよく意識する。\"}),\"\\n\",e(l.p,{children:\"ブラウザの他に一番お世話になっているGUIソフトウェアはObsidianなので、たとえば、「Obsidianのようなソフトウェアを作る」といった目標はどうだろうか？\\nこの目標のためには、今からでもできることはたくさんあると思う。\"}),\"\\n\",e(l.p,{children:\"ユーザーや、ビジネスを意識した実装は業務のなかでも心がけているつもりだ。\"}),\"\\n\",e(l.p,{children:\"最適なメモリ効率、美しいコードベース、素晴らしいDX…。これらもユーザー、ビジネスに貢献しなければ存在価値は無い。だからといって、めちゃくちゃな実装をすれば、いずれプロジェクトに不具合が起きたりしてユーザーに悪影響をもたらす。\"}),\"\\n\",e(l.p,{children:\"あるプロジェクトでは、予算も納期も余裕があって、最適なコードを書く努力をする余裕もあるが、あるプロジェクトではそんなことは言っていられない、「とにかく早く納品だ！」な時もある。\"}),\"\\n\",e(l.p,{children:\"最近はそんなことをゴチャゴチャよく考える。\"}),\"\\n\",e(l.h2,{id:\"どのような経験を積むべきか\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#どのような経験を積むべきか\",children:\"どのような経験を積むべきか\"})}),\"\\n\",e(l.p,{children:\"「どんなエンジニアになりたいか」と言う問いに対する頭のゴチャつきを少し整理してみた。\"}),\"\\n\",e(l.p,{children:\"今、頭の中にもやっとあるエンジニア像に将来近づくために、これからどんな経験を積むべきだろうか。\"}),\"\\n\",e(l.p,{children:\"とにかく開発の経験がもっと必要だろう。Web、モバイル問わず色々なサービスを開発・運用する経験を積む必要を感じる。優れたサービスとは何か、ソフトウェアを開発・運用すると言うことは、実際どんな行為によって成り立っているのだろうか、と理解する必要があると思う。\"}),\"\\n\",e(l.p,{children:\"もっと設計の経験を積む必要がある。少し引いた、マクロな視点でソフトウェアの開発を見たい。職場のアーキテクトの仕事ぶりを見ていたりすると思う。\"}),\"\\n\",e(l.p,{children:\"もっと色々な多くの優秀な開発者と仕事をしてみたい。プログラミングはYouTubeやテキスト媒体で学べるが、やはり、現場で試行錯誤するエンジニアから「何か」を感じて僕の中に取り組んでいる感じが少しある。問題を解決するプロセスというのは、本当に人によって多種多様だ。だからペアプログラミングは面白い。\"}),\"\\n\",i(l.p,{children:[\"以上のことをPaul Grahamの「\",e(l.a,{href:\"https://practical-scheme.net/trans/hp-j.html\",children:\"ハッカーと画家\"}),\"」を読んで考えた。\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2024/0110"
  },
  {
    "slug": "blog/2024/1010",
    "title": "ブログをリニューアルした",
    "date": "2024-10-10T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:t}=arguments[0];function _createMdxContent(r){const a={a:\"a\",h2:\"h2\",p:\"p\",...r.components};return t(n,{children:[e(a.h2,{id:\"main\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#main\",children:\"Main\"})}),\"\\n\",e(a.p,{children:\"Gatsbyで作っていたブログをNext.jsに移行した。\\nShadcn/uiを使用して、デザインを刷新した。\\nVeliteを使用して、パフォーマンスを向上した。\\nVercelにデプロイした。\"}),\"\\n\",e(a.p,{children:\"これからもっと書いていく。\"})]})}return{default:function(n={}){const{wrapper:t}=n.components||{};return t?e(t,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2024/1010"
  },
  {
    "slug": "blog/2020/10/firstPost",
    "title": "初投稿",
    "date": "2020-10-31T00:00:00.000Z",
    "tags": [
      "Unsorted"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(i){const l={a:\"a\",h4:\"h4\",li:\"li\",p:\"p\",ul:\"ul\",...i.components};return r(n,{children:[e(l.p,{children:\"こんにちは、プログラミングの勉強をしている身のものです。ここにはプログラミング学習で学んだことを書いていこうと思います。\"}),\"\\n\",e(l.p,{children:\"今日で学習開始から 22 日ほど、大体 150 時間届かないぐらいの勉強時間だと思います。\"}),\"\\n\",e(l.p,{children:\"最初は Progate の Node.js ウェブ開発パスと、Ruby on Rails のウェブ開発をおわらして、基礎の学習をしました。\\nその次は何をしようかなと思って、勉強の成果を発信できる場所が欲しいなと思いブログを開設したわけです。\"}),\"\\n\",e(l.p,{children:\"このブログは Gatsby.js という React 製のサイト・ジェネレーターを使って作成しました。僕が初めてインターネット上にデプロイしたものです。\"}),\"\\n\",e(l.p,{children:\"はてなブログなどのブログサービスも検討したのですが、やはりプログラミングを勉強しているのだから、それぐらいは自分でしたいと思い 0 から作りました。といいつつも Youtube のチュートリアルを見様見真似でやっただけなのですが笑\"}),\"\\n\",e(l.p,{children:\"でもこれからアレンジするつもりです。\"}),\"\\n\",e(l.h4,{id:\"追加したいと思っているもの\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#追加したいと思っているもの\",children:\"追加したいと思っているもの\"})}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"カテゴリー\"}),\"\\n\",e(l.li,{children:\"次の記事/前の記事\"}),\"\\n\",e(l.li,{children:\"ダークテーマ\"}),\"\\n\",e(l.li,{children:\"CSS の修正（あまりにも素っ気ない気がするので。)\"}),\"\\n\",e(l.li,{children:\"独自ドメイン\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2020/10/firstPost"
  },
  {
    "slug": "blog/2020/12/2020-lookback",
    "title": "2020年プログラミング学習の振り返り",
    "date": "2020-12-30T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(r){const a={a:\"a\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",ul:\"ul\",...r.components};return i(n,{children:[e(a.h2,{id:\"2020年を振り返る\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#2020年を振り返る\",children:\"2020年を振り返る\"})}),\"\\n\",e(a.p,{children:\"年末なので今年のプログラミング学習を振り返りたい。(まだ学習を初めて3ヶ月にも満たないが)\"}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:\"触れたもの : Node.js, Ruby, Rails, My SQL, Gatsby.js\"}),\"\\n\",e(a.li,{children:\"ガッツリ勉強したもの: HTML & CSS, JavaScript, React\"}),\"\\n\"]}),\"\\n\",e(a.h2,{id:\"javascriptについて\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#javascriptについて\",children:\"JavaScriptについて\"})}),\"\\n\",e(a.p,{children:\"　学習開始直後は「プログラミング」といっても様々な領域に数えきれないほどの言語があり、圧倒されて何をして良いのかわからなかった。評判の良いプロゲートで色々な言語を触ってみたり、ネットで調べてみたりした。チュートリアルを見ながらGatsbyでこのブログの骨組みを作った時、JS関連の技術に興味を持ち、そこを追求していこうと決めた。Web開発の初心者にはMERNStackなどJSの技術を学ぶのが得策であるように思えたのだ。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"そう考えた理由として、\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:\"JavaScriptがフロントエンドもバックエンドも担えること\"}),\"\\n\",e(a.li,{children:\"SPAの台頭によりフロントエンド重要性が増していること\"}),\"\\n\",e(a.li,{children:\"サーバーサイドの言語としてRuby,Python,PHPなど別の言語を学ぶよりもNode.jsを学んだ方が学習コストが低いのではないかという推論。\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"などがある。\"}),\"\\n\",e(a.p,{children:\"もちろんこれはウェブの歴史・現状をよく理解していない僕の推測であるのだが、初心者の僕がweb開発の世界をこういう風に見ていることをここに残しておきたい。\"}),\"\\n\",e(a.p,{children:\"短い話、プログラミングで作りたい物を明確にイメージ出来ていない僕は「逆にJSならなんでも作れるんじゃね？」と思いJSにしたのだ。これは僕のお気に入りアプリケーションのObsidianがElectronで作られているという事の影響が大きい。\"}),\"\\n\",e(a.h2,{id:\"今年は何をしたか\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#今年は何をしたか\",children:\"今年は何をしたか\"})}),\"\\n\",e(a.p,{children:\"今年はとにかくUdemyに時間を使った。具体的にはHTML&CSS、JS、Reactのコースを学習したのだが、それは「Gatsby.jsを使ってweb開発をしたい」という動機があったからだ。\"}),\"\\n\",e(a.p,{children:\"おかげで、Gatsbyのコード見た時、だいたい何が起こっているか理解できるようにはなった。しかし世の中には「チュートリアル地獄」というものがあるらいしくて、僕はおもっきりそれにハマっていたと言える。\"}),\"\\n\",e(a.p,{children:\"そうは言っても、僕のような初めて数ヶ月の初心者にとってそれ以外良い独学での勉強法があるのかと思う。実際にものを作るのが一番良い勉強法だというが、HTMLもわからないような人がGatsbyを使える訳が無い。僕が作りたいものを作るための知識を得るためには僕はこれが一番良い方法だと思った。\"}),\"\\n\",e(a.h3,{id:\"来年は何をしたいか\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#来年は何をしたいか\",children:\"来年は何をしたいか\"})}),\"\\n\",e(a.p,{children:\"興味のある分野をひたすら掘り下げるたい。今興味あるのはMERN Stackだ。フロントエンドはだいたいどう言う事が起こっているのかはわかり始めてきた。Node.jsを学んでバックエンドでどういうことが起こっているのか知りたい。\"}),\"\\n\",e(a.p,{children:\"来年は半人前ぐらいになれると良いな。\"})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2020/12/2020-lookback"
  },
  {
    "slug": "blog/2020/12/Programming-2nd-motnth",
    "title": "プログラミング学習記 2ヶ月目",
    "date": "2020-12-15T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(r){const a={a:\"a\",h3:\"h3\",p:\"p\",...r.components};return i(n,{children:[e(a.p,{children:\"ウェブ開発の学習を初めて 2 ヶ月が過ぎた。ここに記録を残しておく。\"}),\"\\n\",e(a.p,{children:\"箇条書きにすると\\n・Udemy で Javascript のコース\\n・Udemy で HTML & CSS + Sass のコース\\nを行った。\"}),\"\\n\",e(a.p,{children:\"今月はまず The Complete Javascript Course の途中から始めた。\\nかなりボリュームのあるコースだったのでほとんどの時間をこのコースに投じることになったが JS の基礎を俯瞰することが出来たと思う。\"}),\"\\n\",e(a.p,{children:\"コースを終えやっと自分で何か作れると思ったが、HTML と CSS の知識が浅すぎることに気づいてこちらも Udemy でコースを購入した。購入したのは Modern HTML & CSS From The Beginning というので値段は 1000 円ぐらいだった。このブログは Sass で書いているので、Sass を強化する目的もある。\"}),\"\\n\",e(a.p,{children:\"このコースは再生時間 20 時間ほどだったが、JS に比べるとつまずくことが殆どなく、すぐに終了することができた。\"}),\"\\n\",e(a.p,{children:\"この記事を書いた前日に終わらしたので、現在自分の持っているスキルセットで何か個人的なプロジェクトを作成しようと企んでいるところだ。\"}),\"\\n\",e(a.h3,{id:\"obsidian-について\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#obsidian-について\",children:\"Obsidian について\"})}),\"\\n\",e(a.p,{children:\"僕は長いことパソコンで日記を書いていて、日記やその他の情報の管理にはかなり強い拘りがある。3 ヶ月ほど前に Notion から Obsidian に引越しをしたのだが、今月は特に Obsidian のシステムというか、僕なりの枠組みを構築するのにすごい時間がかかった。\"}),\"\\n\",e(a.p,{children:\"さらに今月から Obsidian のワークショップに参加していて、毎日 1,2 時間の時間をそれに使っていたので、プログラミングにあまり時間を使うことが出来なかった。\"}),\"\\n\",e(a.p,{children:\"とはいえ、Obsidian での作業を自動化するために初めて bashscript を弄ったり、プログラミングの情報を整理したりもしているので、全く無関係とは言えないが。\"}),\"\\n\",e(a.h3,{id:\"プログラミング学習-65-日目の所感\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#プログラミング学習-65-日目の所感\",children:\"プログラミング学習 65 日目の所感\"})}),\"\\n\",e(a.p,{children:\"今日でプログラミングの学習を開始して 65 日が経過した。その時間の多くを CSS と JS に投じたので今自分のできることはフロントエンドをちょっとできるぐらいだ。\"}),\"\\n\",e(a.p,{children:\"あと、この 2 ヶ月は殆どチュートリアルに時間を使っていたので、そろそろ自分のオリジナルのプロジェクトを作って見ようと思う。\"}),\"\\n\",e(a.p,{children:\"フロントエンドに集中しようと決めてはみたものの、まだまだ学ぶことが多いし、「知っている」から「出来る」にしなくてはいけないこともたくさんある。\"}),\"\\n\",e(a.p,{children:\"3 ヶ月目になにかおもしろい発表ができるように精進します。\"})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2020/12/Programming-2nd-motnth"
  },
  {
    "slug": "blog/2020/11/programming-1st-month",
    "title": "プログラミング学習記-1ヶ月目",
    "date": "2020-11-11T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:a}=arguments[0];function _createMdxContent(r){const i={a:\"a\",blockquote:\"blockquote\",h2:\"h2\",h3:\"h3\",p:\"p\",...r.components};return a(e,{children:[n(i.p,{children:\"今日でプログラミング学習を初めて1ヶ月が経ったので、学んだことやこの1ヶ月の感想などをまとめてみたいと思う。\"}),\"\\n\",n(i.h3,{id:\"1-progate-nodejs-web-開発パス-1-週間\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#1-progate-nodejs-web-開発パス-1-週間\",children:\"1. Progate Node.js Web 開発パス (1 週間)\"})}),\"\\n\",n(i.p,{children:\"「プログラミング　学習」と検索していろんな記事を読んだり動画を見たりすると、みなさん口を揃えて「先ずはProgate」と仰るので「先ず Progate」をやることにした。コンテンツとしては、\"}),\"\\n\",n(i.p,{children:\"-HTML & CSS\\n-JavaScript\\n-MySQL を少し\\n-Node.js を少し\"}),\"\\n\",n(i.p,{children:\"という感じだった。道場以外特に躓くこともなく、淡々とこなしていった。簡単だとは思わなかったが、理解不能だと思うこともなく学習への導入として適していたと思う。\"}),\"\\n\",n(i.h3,{id:\"2-progate-ruby-on-rails--web-開発パス1-週間\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#2-progate-ruby-on-rails--web-開発パス1-週間\",children:\"2. Progate Ruby on Rails 　 Web 開発パス(1 週間)\"})}),\"\\n\",n(i.p,{children:\"Node.js のパスを終わらしてからは Rails のパスをやってみることにした、理由はプログラミング未経験から転職するには Ruby on Rails を用いてポートフォリオを作成するのが定石みたいな記事を読んだから。\"}),\"\\n\",n(i.p,{children:\"Progate は本当によくできていて、仮想 Terminal と仮想ブラウザがブラウザのページ上に表示されて、Terminal を用いてローカル開発をしてそれを Git push するところまで実践することができる。すごく手軽に始めれて良いと思う。\"}),\"\\n\",n(i.p,{children:\"Ruby は直感的に理解できて素晴らしいと思った。Rails もなんかマインクラフトとかのゲームで自動化してるみたいな感じでワクワクした。\\nこのあたりで毎日ずっと Progate をやり続ける生活が 2 週間ぐらい続いていたので飽きはじめてもいた。\"}),\"\\n\",n(i.h3,{id:\"3-プログラミングに関する情報収集-3-日間\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#3-プログラミングに関する情報収集-3-日間\",children:\"3. プログラミングに関する情報収集 (3 日間)\"})}),\"\\n\",n(i.p,{children:\"Progate をやっているときは Progate が「これやってくださいー」とか「じゃあ次はこれー」って指示をだしてくれていたが、いざ終わらしてみると何をしたら良いのかわからなくなっていた。\"}),\"\\n\",n(i.p,{children:\"そこでとりあえず、今まで習った知識で何ができるかを考えてみたら、HTML と CSS を使った模写とか簡単なページ単位のサイト制作ぐらいということに気づいた。要するに、まだ Progate の補助輪が無いと走れない状態だということに気づいた。\"}),\"\\n\",n(i.p,{children:\"自分で何かをつくるためには何をしたらよいのだろうかと考えた。調べるうちに、自分で発信できる場が欲しいと思いブログを作ることにした。\"}),\"\\n\",n(i.h3,{id:\"4-gatsby-を用いて本ブログを作成-5-日間\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#4-gatsby-を用いて本ブログを作成-5-日間\",children:\"4. Gatsby を用いて本ブログを作成 (5 日間)\"})}),\"\\n\",n(i.p,{children:\"いざブログを作ろうと思い、色々調べてみると、\"}),\"\\n\",n(i.p,{children:\"・はてなブログなどのブログサービスを利用する\\n・自分で一から作る\"}),\"\\n\",n(i.p,{children:\"という二つの選択肢が見えた。人気の Wordpress でブログ作ろうかと考えたが、調べるうちに「Wordpress はレガシー」という評判をよく目にし、「本当にこれで良いのか」と思い留まり、さらに情報収集を続ける。\\nすると、Gatsby という静的サイトジェネレーターに出会う。\"}),\"\\n\",n(i.p,{children:\"「静的サイトジェネレーターってなんやねん」と思いつつ Youtube などを見たり、実際に Gatsby でできたサイトなどにお邪魔して、ページの読み込みの速さにびっくりした。\\n「これでつくるしかない！」と思い Gatsby で本ブログの構築を始めた。\"}),\"\\n\",n(i.h3,{id:\"5-ブログ作成時に-react-に触れ感動して勉強したいと思う\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#5-ブログ作成時に-react-に触れ感動して勉強したいと思う\",children:\"5. ブログ作成時に React に触れ、感動して勉強したいと思う。\"})}),\"\\n\",n(i.p,{children:\"ブログの構築は SSH とか GraphQL とか React とか Progate で習わなかった技術があったことと、初めて Progate の枠組みから外れて何かをしたという 2 つの壁があったが、なんとかデプロイするにまで至った。\"}),\"\\n\",n(i.p,{children:\"React に触ふれていくうちに楽しさを見出し、これについてもっと深く勉強したいと思うようになった。\"}),\"\\n\",n(i.h3,{id:\"6-react-の前提知識として-javascript-を学ぼうと決意\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#6-react-の前提知識として-javascript-を学ぼうと決意\",children:\"6. React の前提知識として JavaScript を学ぼうと決意\"})}),\"\\n\",n(i.p,{children:\"ただ、React は JavaScript のフレームワークなので、まずは JavaScript をある程度を修めなくてはいけないということを知った。そこで色々調べた結果 Udemy で良いコースがあるというので、それを受講することにした。\"}),\"\\n\",n(i.h3,{id:\"7-udemy-で-javascript-の学習を開始8-日間\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#7-udemy-で-javascript-の学習を開始8-日間\",children:\"7. Udemy で Javascript の学習を開始　(8 日間)\"})}),\"\\n\",n(i.p,{children:\"Udemy で JavScript の勉強を開始した。といっても Progate で一度勉強をしているので、最初のあたりは復習の作業になった。動画での勉強を始めて情報量の多さに驚いた。\"}),\"\\n\",n(i.p,{children:\"Progate では\"}),\"\\n\",a(i.blockquote,{children:[\"\\n\",n(i.p,{children:\"スライドで理論について学ぶ → 仮想エディタでコードを書く\"}),\"\\n\"]}),\"\\n\",n(i.p,{children:\"ということの繰り返しだったのが、動画だと一つのトピックについてのもっと多くの情報を得ることができ、さらに深く行けることに驚いた。だから最初の重複しているテーマでも、知らないことがたくさん出てきた。\"}),\"\\n\",n(i.p,{children:\"コースでは関数の使いかたから DOM 操作、さらに JS エンジンの構造(Call stack , heap など)についても学びつつ、実際に動くものを作って学んでいる。全ての再生時間が 90 時間を超えていてかなりのボリュームがありおそらく 2 ヶ月目もかなり多くの時間がこのコースに費やされることになるだろう…。\"}),\"\\n\",n(i.h2,{id:\"1-ヶ月真剣にプログラミングを学んでみた感想\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#1-ヶ月真剣にプログラミングを学んでみた感想\",children:\"1 ヶ月真剣にプログラミングを学んでみた感想\"})}),\"\\n\",n(i.p,{children:\"まだいろんな言語について表面的に齧っただけなのでわからないことだらけだが、コンピューターサイエンスの奥の深さに慄くと同時に高揚感を感じている。コロナ禍で家にいる時間が増えて暇を持て余していたが、プログラミングを初めてから時間が足りないと常に感じている。\"}),\"\\n\",n(i.h2,{id:\"来月の目標\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#来月の目標\",children:\"来月の目標\"})}),\"\\n\",n(i.p,{children:\"とにかくこのドデカい Udemy のコースを終わらして、JS の基礎を身に付けたい。それからは React に行くか、バニラの JS で何かを作ってみようと思う。あと、このサイトの Saas も少しいじりたいので Saas の勉強もしてみたいなとも思っている。\"}),\"\\n\",n(i.h2,{id:\"おわりに\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#おわりに\",children:\"おわりに\"})}),\"\\n\",n(i.p,{children:\"無駄に長い文章に最後までお付き合いいただき、ありがとうございました。今月はとにかくいろんなものを齧ったのでその分長くなっている感じですが。\\n　僕も普段プログラミング学習を最近始めた方のブログをよく読んで参考にさしてもらっているので、僕のブログを読んでだれかが「ふーん」と思っていただければ幸いです。\"}),\"\\n\",n(i.p,{children:\"ではまた。\"}),\"\\n\",n(i.p,{children:\"2020/11/11 　 K\"})]})}return{default:function(e={}){const{wrapper:a}=e.components||{};return a?n(a,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2020/11/programming-1st-month"
  },
  {
    "slug": "blog/2021/09/20210908-wordpress",
    "title": "Wordpressの勉強メモ",
    "date": "2021-09-08T00:00:00.000Z",
    "tags": [
      "Wordpress"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(a){const c={a:\"a\",h2:\"h2\",p:\"p\",...a.components};return r(n,{children:[e(c.h2,{id:\"環境構築\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#環境構築\",children:\"環境構築\"})}),\"\\n\",r(c.p,{children:[\"WPの環境構築には\",e(c.a,{href:\"https://localwp.com/\",children:\"Local\"}),\"を使う。\\nPHPやMySQLなどが必要なのでややこしい\"]}),\"\\n\",e(c.h2,{id:\"テンプレート階層\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#テンプレート階層\",children:\"テンプレート階層\"})}),\"\\n\",e(c.p,{children:\"テンプレートファイルを作る時にテンプレート階層に従う必要がある。\"}),\"\\n\",r(c.p,{children:[\"*\",e(c.a,{href:\"https://wpdocs.osdn.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E9%9A%8E%E5%B1%A4\",children:\"参照\"})]}),\"\\n\",e(c.h2,{id:\"query-monitor\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#query-monitor\",children:\"Query Monitor\"})}),\"\\n\",e(c.p,{children:\"Query monitorというプラグインを使用すると、どのようテンプレートが利用されているか確認することができる。\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/09/20210908-wordpress"
  },
  {
    "slug": "blog/2021/10/20211024-obsidian-status-tracking-of-notes",
    "title": "Obsidianでノートのステータスを管理する仕組みを導入した",
    "date": "2021-10-24T00:00:00.000Z",
    "tags": [
      "Obsidian"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(l){const r={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...l.components};return i(n,{children:[e(r.h2,{id:\"はじめに\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#はじめに\",children:\"はじめに\"})}),\"\\n\",i(r.p,{children:[\"先日、\",e(r.a,{href:\"https://obsidian.md\",children:\"Obsidian\"}),\"の個人用のメインボルトに大幅な変更を加えまして、その中でも最大の変更の一つが「ノートのステータス管理」を導入したという点です。\"]}),\"\\n\",e(r.h3,{id:\"旧来のワークフロー\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#旧来のワークフロー\",children:\"旧来のワークフロー\"})}),\"\\n\",e(r.p,{children:\"ステータス管理を導入するまでの僕のノートを作る時の手順は以下のようでした。例えばネットで猫に関する面白い記事を見つけてきたとしましょう。\"}),\"\\n\",i(r.ol,{children:[\"\\n\",i(r.li,{children:[\"新しいノートを作成する。\",\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"タイトルは「猫の舌はざらざらしている」とでもしましょう。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.li,{children:[\"そのトピックに関する情報を追加する\",\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"「 舌がざらざらしているのは、骨についた肉をこそげとるため」とでも書いて、参照もとのURLを貼っておきます。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.li,{children:[\"関連するノートにそのノートをリンクする\",\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"このノートは例えば「猫 MOC」というノートに繋がるかもしれませんし、「動物 MOC」というノートに繋がるかもしれません。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.p,{children:[\"以上のようなシンプルなワークフローで新しい情報を処理し、ノートを作成していたのですが、ノートをつくるだけでロクに復習をしたりリファクタをしないわけですので情報が洗練されず、\",e(r.a,{href:\"https://publish.obsidian.md/lyt-kit/Umami/MOCs+Overview\",children:\"MOC\"}),\"やノートがそういった情報でごちゃごちゃするようになっていたのでした。\"]}),\"\\n\",e(r.p,{children:\"そこで「新しいノートを作成する手順」より「既存のノートを洗練させる手順」を向上させる必要があるという考えに至りました。\"}),\"\\n\",e(r.h2,{id:\"ノートのステータスとは何か\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ノートのステータスとは何か\",children:\"ノートのステータスとは何か？\"})}),\"\\n\",e(r.p,{children:\"ノートのステータスを、「そのノートにあとどれだけ取り組む必要があるか」の尺度から3段階にわけました。\"}),\"\\n\",i(r.ol,{children:[\"\\n\",i(r.li,{children:[\"Egg note\",\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"作られたばかりのかわいいたまごのようなノートです。ただ情報を入れただけで、他のノートとの繋がりも薄く、まだまだ世話が必要です\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.li,{children:[\"Hiyoko note\",\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"外部から取り込んだ情報を自分の言葉に書き換えて、他のノートにもつなげます。egg noteに比べればかなり出来は良いのですが、まだ一人前になるまで少し世話が必要そうです。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.li,{children:[\"Evergreen note\",\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"ノートは洗練されて、もう迷子になる心配もなさそうです。ようやくノートはAndy Matuschakさんのエバーグリーンノートになりました。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",e(r.p,{children:\"このように、ノートを3つの状態にラベリングすることによって「作業を必要としているノート」を発見しやすくし、それにもっと時間をかけるようにすることが「ノートのステータス管理」の目的です。\"}),\"\\n\",e(r.h2,{id:\"ステータスメタデータの追加\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ステータスメタデータの追加\",children:\"ステータスメタデータの追加\"})}),\"\\n\",e(r.p,{children:\"ステータスの管理はマークダウンファイル上のフロントマターに追加します。\"}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-yml:title=sample.md\",children:\"---\\naliases: cat\\nstatus: egg\\nUID: 20211023165946\\n---\\n\"})}),\"\\n\",i(r.p,{children:[\"新しいノートのテンプレートのフロントマターに\",e(r.code,{children:\"status: egg\"}),\"を追加しておくだけです。\"]}),\"\\n\",i(r.p,{children:[\"もちろんノートを作ったその時にそのトピックについて取り組んで満足がいったらステータスを\",e(r.code,{children:\"hiyoko\"}),\"や\",e(r.code,{children:\"evergreen\"}),\"にしてもなんの問題もありません\"]}),\"\\n\",e(r.p,{children:\"たとえばこんな状態ならまだeggノートとしてステータス管理します。\"}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-md:title=sample.md\",children:\"Link: \\n\\n面白い記事を見つけた。これについてもっと調べよう。\\nurl: sample url\\n\"})}),\"\\n\",e(r.p,{children:\"とはいえ、ステータスには厳格な線引きは設定せずに、あくまで自分の直感にまかせます。\"}),\"\\n\",e(r.h2,{id:\"dataviewで一覧を表示する\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#dataviewで一覧を表示する\",children:\"Dataviewで一覧を表示する。\"})}),\"\\n\",i(r.p,{children:[\"フロントマターを追加したら、\",e(r.a,{href:\"https://github.com/blacksmithgu/obsidian-dataview\",children:\"Dataview Plugin\"}),\"で一気にそれぞれのノートを一覧表示させるようにします。\"]}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-sql:title=dataview\",children:'table file.cday AS Created_at\\nfrom \"\"\\nwhere status = \"egg\"\\n'})}),\"\\n\",i(r.p,{children:[e(r.img,{src:\"/static/20211024-obsidian-status-tracking-of-notes-708032.png\",alt:\"Egg notes\"}),\"\\nEggノートだけ一覧で表示することができました。\"]}),\"\\n\",e(r.p,{children:\"これで定期的に作ったノートに帰ってきて編集するワークフローが出来上がりました。最高です。\"}),\"\\n\",e(r.h2,{id:\"まとめ\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",e(r.p,{children:\"ノートにステータスを追加することによって\"}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"ノートが迷子になる可能性を低くする\"}),\"\\n\",e(r.li,{children:\"復習のステップの明確化\"}),\"\\n\"]}),\"\\n\",e(r.p,{children:\"などのメリットがあると思います。\"}),\"\\n\",e(r.p,{children:\"最近ブログの投稿が滞ってますが、まだまだObsidianについては書きたいことがあるのでネタはたくさんあります…\"})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/10/20211024-obsidian-status-tracking-of-notes"
  },
  {
    "slug": "blog/2022/11/20221103-obsidian-and-gym",
    "title": "Obsidianで筋トレの成長ログをつける",
    "date": "2022-11-03T00:00:00.000Z",
    "tags": [
      "Obsidian"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(r){const i={a:\"a\",code:\"code\",h2:\"h2\",img:\"img\",p:\"p\",pre:\"pre\",...r.components};return a(n,{children:[e(i.p,{children:\"Obsidianで筋トレの成長ログをつけているのでその方法を紹介します。\"}),\"\\n\",a(i.p,{children:[e(i.img,{src:\"/static/SCR-20221103-tu4-efdc24.png\",alt:\"Obsidian screenshot\"}),\"\\nこんな感じで、自分の扱う重量について棒グラフを作成することができます。\"]}),\"\\n\",a(i.p,{children:[\"僕は\",e(i.a,{href:\"https://www.strong.app/\",children:\"Storong\"}),\"というアプリでウォークアウトのログを取っています。\"]}),\"\\n\",e(i.p,{children:\"正直このアプリさえあれば、ジムでの記録は十分なのだが、Obsidianユーザーはデータは全てObsidianに残したいという強迫観念に囚われがちで、僕もその例外ではありません。\"}),\"\\n\",e(i.p,{children:\"本記事ではObsidianでの簡単な筋トレログの付け方を紹介します。\"}),\"\\n\",e(i.h2,{id:\"必要なプラグイン\",children:e(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#必要なプラグイン\",children:\"必要なプラグイン\"})}),\"\\n\",a(i.p,{children:[e(i.a,{href:\"https://github.com/pyrochlore/obsidian-tracker\",children:\"Obsidian Tracker\"}),\"をインストールします。\"]}),\"\\n\",e(i.p,{children:\"このプラグインは他にも色々できます。\"}),\"\\n\",a(i.p,{children:[\"参考：\",e(i.a,{href:\"https://www.youtube.com/watch?v=W_leEJHBZW4&t=30s\",children:\"https://www.youtube.com/watch?v=W_leEJHBZW4&t=30s\"})]}),\"\\n\",e(i.h2,{id:\"コード\",children:e(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#コード\",children:\"コード\"})}),\"\\n\",e(i.p,{children:\"適当なノートに日付と重量のカラムのあるテーブルを作成します。僕は筋トレの種目ごとにノートを作っています。\\nここではバーベルスクワットのノートを例にします。\"}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-markdown\",children:\"| Date     | Weight |\\n| -------- | ------ |\\n| 20220702 | 55     |\\n| 20220807 | 65     |\\n| 20220816 | 75     |\\n| 20220930 | 80     |\\n| 20221021 | 90     |\\n\"})}),\"\\n\",e(i.p,{children:\"今回は、このように「最高重量を更新した日付」を記録してみました。\"}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-tracker\",children:'searchType: table\\nsearchTarget: Barbell Squat[0][0], Barbell Squat[0][1]\\nxDataset: 0\\nline:\\n    title: \"Barbell Squat\"\\n    xAxisLabel: Date\\n    yAxisLabel: Weight\\n\\t\\tyAxisUnit: kg\\n\\t\\tfillGap: true\\n'})}),\"\\n\",e(i.p,{children:'searchtargetでテーブルを指定します。\"fillGap:true\"にしておかないと、点と点がつながりません。'}),\"\\n\",e(i.p,{children:\"これだけで、簡単にグラフを作成することができました。\"}),\"\\n\",e(i.h2,{id:\"まとめ\",children:e(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",e(i.p,{children:\"エンジニアだからといって、全て自動化すればよいという訳ではないと思います。数ヶ月に一度手動で「この2ヶ月でこれぐらい重量を伸ばすことができたんだな」と振り返ることは筋トレのモチベーションの維持と、自分の成長を確認する良い機会だと思います。\"})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2022/11/20221103-obsidian-and-gym"
  },
  {
    "slug": "blog/2023/I_became_dev/I_became_dev",
    "title": "これは職業プログラマーのブログです",
    "date": "2023-09-23T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:n,jsx:r,jsxs:e}=arguments[0];function _createMdxContent(i){const c={a:\"a\",h2:\"h2\",li:\"li\",p:\"p\",ul:\"ul\",...i.components};return e(n,{children:[r(c.h2,{id:\"main\",children:r(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#main\",children:\"Main\"})}),\"\\n\",r(c.p,{children:\"このブログも放置が続いていている。ブログを作成した頃はエンジニアを目指していて、ソフトウェア開発、主にWeb開発の勉強を熱心にしていた。今読み返すと、自分のことながら熱意というか、必死に勉強している感じが伝わってくる。それと同時に「全てを完璧にやらなくては」みたいな力みみたいなのを感じて、読んでいて辛い気持ちになるのも事実だ。\"}),\"\\n\",r(c.p,{children:\"そんなこともあって、先月でエンジニアとして働き始めてから1年が経過した。ブログでは職業エンジニアになれたという報告もしていないし、仕事に関する記事も全く書いていないので、唐突な印象を与えるかもしれない。\"}),\"\\n\",r(c.p,{children:\"現職では開発者という肩書きで、業務時間の過半数をエディターを過ごしている。プログラミングは楽しい。プログラミングをすることで、会社や社会に貢献して、お金をもらえるなんて変な感じすらする。しかし結局のところ、この仕事は僕には向いていると思う。物事を分析したり、問題を解決すること、チームで協力して行うことはどれも自分が得意とすることだと思うからだ。\"}),\"\\n\",r(c.p,{children:\"何より、コンピューターが好きだ。この、指示を与えたら実行してくれる（大抵の場合）四角い箱が好きだ。プログラマーという人種は、この機械と出来るだけ仲良く、調和することが仕事だ。僕の職場ではチームを組んでプロダクトの開発をするので、チームメンバーとのコミュニケーションも大切となってくる。そう考えると、プログラマーとは四六時中機械または人間とコミュニケーションを取っている人間なのかもしれない。\"}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(c.p,{children:\"…\"}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(c.p,{children:\"「エンジニア転職希望者」から「職業エンジニア」となって、ソフトウェア開発やプログラミングに対する考え方は大きく変わった。まず、職業エンジニアというのは、他者のためにプログラミングする人々だ。自分の書いたコードが、誰かの役に立つという喜びはなんとも言い難いものがある。\"}),\"\\n\",r(c.p,{children:\"エンジニアとして転職活動している時にはポートフォリオをいくつも作った。ポートフォリオというものは「僕はこれだけプログラミングができますよ」ということが、それを見る人にわかればわかるほど良いものだ。そういう意味では、他者を意識して作られたソフトウェアでありながら、殆どそれを作った開発者にしか貢献しない奇妙なプロダクトなのかもしれない。\"}),\"\\n\",r(c.p,{children:\"業務でのコーディングでは、常に他者のことを意識する\"}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",e(c.ul,{children:[\"\\n\",r(c.li,{children:\"「この関数の書き方は、他の開発メンバーや保守・改修する人に理解可能だろうか？」\"}),\"\\n\",r(c.li,{children:\"「この書き方でパフォーマンスに影響は無いだろうか？」\"}),\"\\n\",r(c.li,{children:\"「この実装をするために、ソースコードの中に再利用可能なものは無いだろうか？」\\nなどなど。\"}),\"\\n\"]}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(c.p,{children:\"…\"}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(\"br\",{}),\"\\n\",r(c.p,{children:\"正直、職業エンジニアになってからというものの、業務外であまりコーディングはしなくなった。コーディング関係の情報収集はするが、個人的なプロジェクトを作ったりはしていない。\"}),\"\\n\",r(c.p,{children:\"最近、なぜかコーディングの意欲が上がってきて、何かプロジェクトを作りたいと思っている。仕事をしていない時に一番よく使うソフトウェアはObsidianだから、Obsidianのコミュニティーに貢献したり、プラグインを作ってみたいと思う。過去に作ったけど、もっと有用なやつを。それからShaderを用いた映像制作にも関心がある。\"}),\"\\n\",r(c.p,{children:\"あと、これからはボチボチブログを更新していきたいと思う。\"})]})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?r(e,{...n,children:r(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2023/I_became_dev/I_became_dev"
  },
  {
    "slug": "blog/2023/Nowt36/nowt36",
    "title": "nowt36を組み立てた",
    "date": "2023-07-01T00:00:00.000Z",
    "tags": [
      "Ergonomics"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:t}=arguments[0];function _createMdxContent(c){const r={a:\"a\",code:\"code\",h2:\"h2\",img:\"img\",p:\"p\",...c.components};return t(n,{children:[e(r.h2,{id:\"nowt36\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#nowt36\",children:\"nowt36\"})}),\"\\n\",t(r.p,{children:[e(r.a,{href:\"https://github.com/tamago324/nowt36\",children:\"nowt36\"}),\"を購入して組み立てた。\"]}),\"\\n\",e(r.p,{children:e(r.img,{src:\"/static/PXL_20230701_042027427-67b936.jpg\",alt:\"pic_nowt36\"})}),\"\\n\",e(r.p,{children:\"初めて40以下の数のキーボードを使うことになって、キーマップを改めて考え直している。一年ほど前に、68から46のキーボードを使用し始めた時も同じことに頭を悩ました記憶がある。今となれば普通のサイズのキーボードを使うなんて考えられないが、当時は1ヶ月ほどは使いづらくて仕方がなかった。必要な成長痛だったと思う。\"}),\"\\n\",e(r.p,{children:\"組み立ててからまだ1日しか使っていないが、現時点での感想として、とにかく指を全く動かさなくて良いので楽だということに驚く。\\n一体型だが分割風なおかげである程度肩を広げて使用することができるし、手首の角度も急になりすぎない。それから配列もドンピシャで、如何に自分が今まで小指を使っていなかったのかがわかる。\\nnowt36は見た目がかっこいいと思って購入したのだが、見た目以上に「コンパクトな」使用だ。\"}),\"\\n\",e(r.h2,{id:\"keymap\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#keymap\",children:\"Keymap\"})}),\"\\n\",t(r.p,{children:[\"気になるキーマップだが、現在は以下のようなレイアウトで運用している。\\n（なんだか他人様に向けてインターネットで公開するのは恥ずかしい感じもする）\\n\",e(r.img,{src:\"/static/SCR-20230701-tkxr-808445.png\",alt:\"pic\"})]}),\"\\n\",t(r.p,{children:[\"やはり\",e(r.code,{children:\"alt\"}),\", \",e(r.code,{children:\"tab\"}),\", \",e(r.code,{children:\"ctr\"}),\"などを占有キーに配列させることができなくなったが一番大きな変化であり、課題でもある。右手でShiftを押すのにも慣れない。\\nこの「慣れない」というのも新しいキーボードを買ってから暫くしか続かない感情であり、この気持ちを味わい続けてみたいと思う。\"]}),\"\\n\",e(r.p,{children:\"現状このキーマップでコーディングや文章入力は特に問題なく行えている。おそらくこれからちょくちょく修正を加えて、1ヶ月後にはある程度安定してくると思うので、その時にまた記事を書いて紹介したいと思う。\"}),\"\\n\",e(r.p,{children:\"自作キーボードもこれで４台目だ。次はキーボードだけではなく、エルゴノミクス全般の工夫について書いてみたい。\"})]})}return{default:function(n={}){const{wrapper:t}=n.components||{};return t?e(t,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2023/Nowt36/nowt36"
  },
  {
    "slug": "blog/2023/RN_fix_sdk_bug/RN_fix_sdk_bug",
    "title": "ReactNative: Installed Build Tools revision 31.0.0 is corrupted",
    "date": "2023-03-07T00:00:00.000Z",
    "tags": [
      "React Native"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(d){const i={a:\"a\",code:\"code\",h2:\"h2\",p:\"p\",pre:\"pre\",...d.components};return r(e,{children:[n(i.h2,{id:\"状況\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#状況\",children:\"状況\"})}),\"\\n\",r(i.p,{children:[\"React Nativeで\",n(i.code,{children:\"yarn android\"}),\"した時に以下のエラーが発生。\"]}),\"\\n\",n(i.pre,{children:n(i.code,{className:\"language-shell\",children:\"Installed Build Tools revision 31.0.0 is corrupted. Remove and install again using the SDK Manager.\\n\"})}),\"\\n\",r(i.p,{children:[n(i.code,{children:\"cd ./android\"}),\"して、\",n(i.code,{children:\"./gradlew clean\"}),\"を実行したり、ビルドツールを再インストールしたがエラーは変わらず。\"]}),\"\\n\",n(i.p,{children:\"結局以下の方法で解決した。\"}),\"\\n\",r(i.p,{children:[n(i.code,{children:\"C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\build-tools\\\\31.0.0\"}),\"\\n\",n(i.code,{children:\"C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\build-tools\\\\31.0.0\\\\lib\"})]}),\"\\n\",r(i.p,{children:[\"の二箇所のディレクトリの\",n(i.code,{children:\"d8.bat\"}),\"を\",n(i.code,{children:\"dx.bat.\"}),\"に変更。\"]}),\"\\n\",n(i.h2,{id:\"参考\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考\",children:\"参考\"})}),\"\\n\",n(i.p,{children:n(i.a,{href:\"https://stackoverflow.com/questions/68387270/android-studio-error-installed-build-tools-revision-31-0-0-is-corrupted\",children:'Android Studio error \"Installed Build Tools revision 31.0.0 is corrupted\" - Stack Overflow'})})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2023/RN_fix_sdk_bug/RN_fix_sdk_bug"
  },
  {
    "slug": "blog/2023/RN_useful_commands/RN_useful_commands",
    "title": "ReactNativeでUIインスペクトする",
    "date": "2023-09-13T00:00:00.000Z",
    "tags": [
      "React Native"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:c}=arguments[0];function _createMdxContent(r){const t={a:\"a\",code:\"code\",h2:\"h2\",p:\"p\",pre:\"pre\",...r.components};return c(e,{children:[n(t.h2,{id:\"状況\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#状況\",children:\"状況\"})}),\"\\n\",n(t.p,{children:\"React Nativeでブラウザのインスペクト機能のように、UIの情報を取得する方法。\\nデバイスを振るとメニューが表示されるというが、なぜか僕の環境ではそれができなかった。以下のコマンドをターミナルで実行すると、デバイスを振らずにメニューを表示できる。\"}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-shell\",children:\"adb shell input keyevent 82\\n\"})}),\"\\n\",c(t.p,{children:[\"もっと早く知りたかったコマンドではある。\",n(t.code,{children:\"abd\"}),\"は色々な機能があって便利だ。\"]})]})}return{default:function(e={}){const{wrapper:c}=e.components||{};return c?n(c,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2023/RN_useful_commands/RN_useful_commands"
  },
  {
    "slug": "blog/2023/Sept_report/2023_sept_report",
    "title": "近況",
    "date": "2023-10-07T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:e,jsx:a,jsxs:n}=arguments[0];function _createMdxContent(i){const c={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...i.components};return n(e,{children:[a(c.h2,{id:\"main\",children:a(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#main\",children:\"Main\"})}),\"\\n\",a(c.h3,{id:\"react-native\",children:a(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#react-native\",children:\"React Native\"})}),\"\\n\",a(c.p,{children:\"最近またReact Nativeをゴリゴリ書いている。1日に数百行も書くこともあって、今までで一番ガッツリ「新規開発」をしている感じがする。責任も増えてプレッシャーも感じるが、兎に角楽しい。React Nativeの理解をもっと深めたいと思い。React Nativeの処理についての動画や記事を良く見る。\"}),\"\\n\",a(c.h3,{id:\"paiza\",children:a(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#paiza\",children:\"Paiza\"})}),\"\\n\",n(c.p,{children:[\"なんとなくアルゴリズムっぽいコーディングがしたくなり、Paizaを久々に解いた。時間はかかったが、B問題は普通に解けるようになっていた。僕は職業的にはフロントエンドエンジニアだが、このレベルのデータ処理の問題を解けないと、確かに仕事にならない感じはする。\",a(c.code,{children:\"console.log()\"}),\"の使い方は一年前と比べて上達した感じがする。\"]}),\"\\n\",a(c.p,{children:\"しかし普段VSCodeでコーディングしているからか、Paizaのエディタでコーディングするのは難しいと感じた。Vimは使えないし、反応にもラグがあるし。こういう時、自分がいかにIDEに依存しながらコーディングしているのかを自覚する。Paizaの注意書きに、「生成AIを使っていないかチェックしています」みたいな注意書きがあったが、今時生成AIを使用しないコーダーなどいるのだろうか。\"}),\"\\n\",a(c.p,{children:\"2023年において「IDEも使わず、生成AIも使わずにプログラミングをする」というのは、もはや異質なものに思える。しかし、自分の頭と指だけ使って問題を解くのは、数学の問題を解くような純粋な喜びがある。ありがとう。\"}),\"\\n\",a(c.h3,{id:\"redux\",children:a(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#redux\",children:\"Redux\"})}),\"\\n\",a(c.p,{children:\"業務でReduxを使い始めたので勉強している。正直今まで「React Hooksで十分やろ、状態管理ライブラリとかオーバーキルや」と思っていたが、確かにこれは便利だと思う。どのツールも適所適材だ。\\n初めてReduxを勉強した時は兎に角チュートリアル動画を見まくるみたいなやり方で勉強して、結局身についていなかった気がする。今は、自分がわからない部分だけ調べて知識を補うようにしている。最近は、動画よりテキストベースで学習するのを好む。自分のペースで進めたい。\"}),\"\\n\",a(c.h3,{id:\"this-blog\",children:a(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#this-blog\",children:\"This blog\"})}),\"\\n\",a(c.p,{children:\"このブログのGatsbyのバージョンを上げようとしたが失敗。Deprecatedまみれの依存関係。一からTypeScriptで書きなおそうかと思っている。そんな複雑なソースコードでもないし。\\n最近は本当にコーディングが楽しい。\"})]})}return{default:function(e={}){const{wrapper:n}=e.components||{};return n?a(n,{...e,children:a(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2023/Sept_report/2023_sept_report"
  },
  {
    "slug": "blog/2023/Shader_gsgl/Shader_gsgl",
    "title": "Shader GSGLの設定",
    "date": "2023-10-28T00:00:00.000Z",
    "tags": [
      "Shader"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(c){const i={a:\"a\",code:\"code\",del:\"del\",h2:\"h2\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...c.components};return r(e,{children:[n(i.h2,{id:\"main\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#main\",children:\"Main\"})}),\"\\n\",n(i.p,{children:\"Shader GSGLの勉強を始めたので、メモを残しておく。\"}),\"\\n\",r(i.p,{children:[n(i.a,{href:\"https://github.com/patriciogonzalezvivo/glslViewer\",children:\"gsglViewer\"}),\"というCLIをインストールする。\"]}),\"\\n\",n(i.pre,{children:n(i.code,{className:\"language-shell\",children:\"gsglViewer <fileName.frag>\\n\"})}),\"\\n\",n(i.p,{children:\"で実行する。\"}),\"\\n\",r(i.p,{children:[\"png出力するには、\",n(i.code,{children:\"sequence\"}),\"コマンドを使用する。\"]}),\"\\n\",n(i.pre,{children:n(i.code,{className:\"language-shell\",children:\"sequence ,<startSec>,<endSec>\\n\"})}),\"\\n\",n(i.p,{children:\"出力した連番画像を動画に変換する\"}),\"\\n\",n(i.pre,{children:n(i.code,{className:\"language-shell\",children:\"ffmpeg -i 00%03d.png -vcodec libx264 -pix_fmt yuv420p out_vimeo.mp4\\n\"})}),\"\\n\",n(i.p,{children:\"##　まとめ\\nShaderは楽しい。\"}),\"\\n\",n(i.h2,{id:\"references\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#references\",children:\"References\"})}),\"\\n\",r(i.ul,{children:[\"\\n\",n(i.li,{children:n(i.a,{href:\"https://vimeo.com/298123159\",children:\"Vimeo\"})}),\"\\n\",n(i.li,{children:r(i.a,{href:\"https://qiita.com/livlea/items/a94df4667c0eb37d859f\",children:[\"Qiita_ffmpegで連番画像から動画生成 / 動画から連番画像を生成 \",n(i.del,{children:\"コマ落ちを防ぐには\"})]})}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2023/Shader_gsgl/Shader_gsgl"
  },
  {
    "slug": "blog/2023/VSCode_and_neovim/VSCode_and_neovim",
    "title": "VSCodeとVim",
    "date": "2023-04-30T00:00:00.000Z",
    "tags": [
      "VSCode"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:c}=arguments[0];function _createMdxContent(o){const i={a:\"a\",code:\"code\",h2:\"h2\",p:\"p\",...o.components};return c(e,{children:[n(i.h2,{id:\"neovim\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#neovim\",children:\"Neovim\"})}),\"\\n\",c(i.p,{children:[n(i.a,{href:\"https://jujekebab.com/blog/20211101-neovim-config\",children:\"この記事\"}),\"でターミナル上のNeovimとVSCode上の操作感を一緒にするために色々苦労したことを書いたが、最近\",n(i.a,{href:\"https://github.com/VSCodeVim/Vim\",children:\"VScode Vim\"}),\"のプラグインに移行した。このプラグインは入れるだけでVimのコマンドを使用することができる基本的なものだ。\"]}),\"\\n\",c(i.p,{children:[\"正直僕にとって\",n(i.code,{children:\"hjkl\"}),\"でのカーソル移動や基本的なコマンドが使えれば十分だと気づいたからだ。ニッチな要求を満たすためにconfigを何時間もいじるのはあまり懸命でないと思ったし、維持のコストも高い。\"]}),\"\\n\",n(i.p,{children:\"仕事ではターミナルよりVSCodeで開発することが多いので、素のVSCodeというエディタをもっと上手に使いこなしたいとも思ったのもある。今の僕の目標は業務での職能を上げるということにある。そのためにはやはり基本に忠実に一個一個コツコツ積み上げることが大切だと思っている。\"}),\"\\n\",c(i.p,{children:[\"自分の\",n(i.code,{children:\"nvim.config\"}),\"を育てた経験は役に立った。ソフトウェア開発の能力はなんやかんやこういう一見無駄に思えるようなことの積み重ねでできているのかもしれない。\"]})]})}return{default:function(e={}){const{wrapper:c}=e.components||{};return c?n(c,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2023/VSCode_and_neovim/VSCode_and_neovim"
  },
  {
    "slug": "blog/2020/12/Udemy-javascript/Udemy-javascript",
    "title": "Udemyで再生時間70時間のJavaScriptのコースを終わらせた",
    "date": "2020-12-01T00:00:00.000Z",
    "tags": [
      "JavaScript"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(r){const c={a:\"a\",p:\"p\",...r.components};return t(e,{children:[t(c.p,{children:['Udemy にある\"The Complete JavaScript Course 2020: From Zero to Expert!\"(',n(c.a,{href:\"https://www.udemy.com/course/the-complete-javascript-course/)%E3%81%A8%E3%81%84%E3%81%86%E3%82%B3%E3%83%BC%E3%82%B9%E3%82%92%E6%98%A8%E6%97%A5%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9B%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\",children:\"https://www.udemy.com/course/the-complete-javascript-course/)というコースを昨日終わらせました。\"})]}),\"\\n\",n(c.p,{children:\"総再生時間 70 時間とかなりボリュームがあったので、このコースには 110 時間ほど、日数にして約 1 ヶ月費やしました。\"}),\"\\n\",n(c.p,{children:\"どのコースを用いてプログラミングの学習を進めるかが学習の質を断定するとは思わないが、結果として、数あるコースの中からこれを選んで良かったと思う。\"}),\"\\n\",n(c.p,{children:\"このコースを始める前は Progate で JS のコースを 10 時間ぐらいかけて終わらしただけで、バニラの JS で何かを作ったこともなかったし、そもそも JS で何ができるのかもよくわかっていなかった。それがこのコースを終わらせたことにより、JS ができること、不得意なこと、JS の歴史、コールスタックやヒープなどの JS の構造の部分にも深くは無いが一定の知識を得ることが出来たと思う。\"}),\"\\n\",n(c.p,{children:'個人的に印象に残っているものとしては\"DOM and Events Fundementals\"で最初に作った簡単なサイコロゲームとか、OOP で学んだ Prototype chain などの概念などなど。\\n　ただこれらの概念もまだ補助輪付きでなんとか使えているだけなので、自分でプロジェクトを作ってそこで使って行かないと身になるものでは無いと思う。'}),\"\\n\",n(c.p,{children:\"結構時間も使ったし、自分の中では「JavaScript 使えます」みたいな気持ちになっているが、言ってもここが本当のスタートだから、今日から独自のプロジェクト・ポートフォリオの制作に取り組んで行きたい。\"})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2020/12/Udemy-javascript/Udemy-javascript"
  },
  {
    "slug": "blog/2021/02/20210206-programming-learning/20210206-programming-learning",
    "title": "現在のプログラミング学習法",
    "date": "2021-02-06T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(r){const a={a:\"a\",h2:\"h2\",img:\"img\",p:\"p\",...r.components};return i(n,{children:[e(a.h2,{id:\"プログラミングの独学\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#プログラミングの独学\",children:\"プログラミングの独学\"})}),\"\\n\",e(a.p,{children:\"僕はプログラミング(Web開発)を特にスクールにいったり、メンターをつけたりせずに独学で勉強している。Web開発で初学者が躓くような問題は大抵ググれば答えが見つかるので、個別の問題を解決することに関しては目下困ってはいない。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"プログラマーは親切な人が多いと思う。この界隈には自分が苦労したりハマったりした問題を、後続の人が同じ轍を踏まないために丁寧に解法を書き残す人が多い。僕は毎日そういった人の書いた記事に助けられて、とてもありがたく感じている。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"たまに自分がハマり、時間をかけてそれを解決したあと、「これ記事にしよう」と思って軽い気持ちで書き始めたら平気で2、3時間とか執筆に時間をかけたりしてしまうので、他人が読んでもわかりやすいように説明するのがどれだけ面倒臭いことかはよくわかっている。\"}),\"\\n\",e(a.h2,{id:\"独学のワークフロー\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#独学のワークフロー\",children:\"独学のワークフロー\"})}),\"\\n\",e(a.p,{children:\"僕は新しい技術を学ぶ時\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"1.Udemy\"}),\"\\n\",e(a.p,{children:\"2.自分で何かを作る\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"ということをひたすら繰り返している。YouTubeで無料の教材がたくさんあるのは知っているけれども、やっぱりUdemyなどの有料教材は無料の物にくらべて体系立てがしっかりしているので、頭のなかにインデックスを作りやすく、特に後になって例えば「React Hooksの理解が浅いな」となっても振り返りやすい。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"特に独学者にとって「自分が何がわからないか」を自分で理解することはとても大切だと思う。学校みたいに自分の理解度が数字になるテストというものが存在しないから。\"}),\"\\n\",e(a.h2,{id:\"obsidian\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#obsidian\",children:\"Obsidian\"})}),\"\\n\",e(a.p,{children:\"体系立ててプログラミングを学ぶことのメリットの一つに「ノートをとりやすい」というものがある。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",i(a.p,{children:[\"僕は\",e(a.a,{href:\"https://obsidian.md/\",children:\"Obsidian\"}),\"というノートアプリでプログラミングの学習ノートをとっていて、これがかなり学習の効率化に役立っている。\\nObsidianの良さは色々あるけれど、1.マークダウンでかけるということと、2.簡単に別のノートへのリンクを作れるというのですごく気に入っている。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",i(a.p,{children:[\"Obsidianでこんな風にまとめておけば、簡単に復讐できるし、後からブログ記事にする時もかなり楽で一石二鳥だ。僕のワークフローはObsidianありきで成立している。\\n\",e(a.img,{src:\"/static/Obsidian1-d9375d.png\",alt:\"Obsidian\"})]}),\"\\n\",e(a.p,{children:\"半年前ぐらいまでNotionを使っていたけれども、Notionで文章を書くのはあまり快適じゃないというのと、将来他のアプリにデータを移したいという時にNotion独自のデータ規格が障害になるとおもってObsidianに引っ越した。今日本でnotionが流行り出しているけれども僕はObsidianで大満足している。\"}),\"\\n\",e(a.p,{children:\"NotionやObsidianなどのPKM(Personal Knowledge Management)は昔から大好きでいくらでも話せるが記事が長くなり過ぎるのでまた別の機会に笑\"}),\"\\n\",e(a.h2,{id:\"自分で何かをつくることの大切さ\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#自分で何かをつくることの大切さ\",children:\"自分で何かをつくることの大切さ\"})}),\"\\n\",i(a.p,{children:[\"僕はUdemyで40時間近くある\",e(a.a,{href:\"https://www.udemy.com/course/react-2nd-edition/\",children:\"Reactのコース\"}),\"を終わらせたけれども、そのコースを終わらせたからといってReactがバリバリ使えるかというと全くそうでもない。実際Gatsbyでこのブログを作った時もReactの基礎的な部分で何度もつまずいた。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"チュートリアルを終わらすことというのは、あくまで自分の中にインデックスが作られた(＝「知っている」)のであって決してそれが「できるようになった」のでは無い。できるようにするには、自分でものを作っていくしか無いのだと思う。これはスポーツでも勉強でもなんでも同じなんだなと思う。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"プログラミングの学習を始めた頃は右も左もわからず、動画でしか新しいことは学べなかったけれども、最近は公式のドキュメントやQittaやZennなどの記事をみながら新しい技術を使えるようになってきた。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"プログラミングの学習をしばらく続けてきて、プログラミング技術もそうだが「プログラミング学習の技術」が上達している気がする。\"})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/02/20210206-programming-learning/20210206-programming-learning"
  },
  {
    "slug": "blog/2021/02/20210210-node-jest-test/20210210-node-jest-test",
    "title": "JestでNodeアプリをテストする",
    "date": "2021-02-10T00:00:00.000Z",
    "tags": [
      "Jest"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:s}=arguments[0];function _createMdxContent(r){const t={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return s(e,{children:[n(t.h2,{id:\"はじめに\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#はじめに\",children:\"はじめに\"})}),\"\\n\",s(t.p,{children:[n(t.a,{href:\"https://jestjs.io/ja/\",children:\"Jest\"}),\"はFacebookが開発するオープンソースのJavaScriptのテストフレームワークです。\"]}),\"\\n\",n(t.p,{children:\"ちなみにJavaScriptのTestでJestらしいです。\"}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.p,{children:n(t.code,{children:\"Jest はシンプルさを重視した、快適な JavaScript テスティングフレームワークです。\"})}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.p,{children:\"と公式ドキュメントにあるようにシンプルなシンタックスでテストを書くことができます。\"}),\"\\n\",n(t.p,{children:\"この記事ではNode.jsとExpressのためテストの書き方を紹介します。\"}),\"\\n\",n(t.h2,{id:\"なぜテストする必要があるのか\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#なぜテストする必要があるのか\",children:\"なぜテストする必要があるのか\"})}),\"\\n\",n(t.p,{children:\"一つのアプリケーションはいくつものモジュールに分割することができます。ユニットテストにはそのモジュールがきちんと機能しているかを確かめる目的があります。\"}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.p,{children:\"そうすることで\"}),\"\\n\",n(\"br\",{}),\"\\n\",s(t.ul,{children:[\"\\n\",n(t.li,{children:\"各モジュールの役割を明確にすること\"}),\"\\n\",n(t.li,{children:\"バグがあった時に原因を探しやすくなる\"}),\"\\n\"]}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.p,{children:\"などのメリットがあります。\"}),\"\\n\",n(t.p,{children:\"小規模のプログラムだと、手動でテストすることも可能かもしれませんが、プログラムが大規模になるにつれテストの重要度は増していきます。\"}),\"\\n\",n(t.h2,{id:\"jestの設定\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#jestの設定\",children:\"Jestの設定\"})}),\"\\n\",n(t.p,{children:\"開発でしか使いませんのでdev-dependenciesとしてnpmインストールします。\"}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-bash:title=terminal\",children:\"$ npm i jest --save-dev\\n\"})}),\"\\n\",s(t.p,{children:[n(t.code,{children:\"npm run test\"}),\"でテストを実行できるように、package.jsonにスクリプトを用意しましょう。\"]}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=package.json\",children:'{\\n  \"scripts\": {\\n    \"test\": \"jest\"\\n  }\\n}\\n'})}),\"\\n\",n(t.h2,{id:\"基本的な使い方\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#基本的な使い方\",children:\"基本的な使い方\"})}),\"\\n\",s(t.p,{children:[\"テスト用のコードは\",n(t.code,{children:\"tests\"}),\"というディレクトリを作成し、そのなかに\",n(t.code,{children:\"title.test.js\"}),\"という風にモジュールの名前に対応するテストファイルをそれぞれ作成します。そうしなくてはいけないというルールはありませんが、この方法だとより管理しやすいと思います。\"]}),\"\\n\",n(\"br\",{}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-bash\",children:\"├── src\\n│   └── app.js\\n├── tests\\n│   └── app.test.js\\n└── package.json\\n\"})}),\"\\n\",n(t.p,{children:\"例としてこのような足算する関数をテストしてみましょう。\"}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=app.js\",children:\"const add = (a,b) => a + b;\\n\"})}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.p,{children:\"Jestでのテストの書き方は非常にシンプルです。testの第一引数には「テスト名（期待する結果をストリングで）」を第2引数には「テストコード」を渡します。\"}),\"\\n\",n(t.p,{children:\"例えば上記のadd関数の役割は「aとbの和を返すこと」ですので。このようなコードになります。\\nほとんど英文に近いですね。\"}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=app.test.js\",children:'test(\"Should return a plus b\", () => {\\n  const result = add(1,2);\\n  expect(result).toBe(3);\\n});\\n'})}),\"\\n\",n(t.h2,{id:\"テストを実行する\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#テストを実行する\",children:\"テストを実行する\"})}),\"\\n\",s(t.p,{children:[n(t.code,{children:\"npm run test\"}),\"でテストを実行することができます。結果はこのような形でコンソールに表示されます。\\nもしエラーがあったら、そのユニットテストを確認して修正する、という感じです。\"]}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-bash\",children:\"Test Suites: 2 passed, 2 total\\nTests:       13 passed, 13 total\\nSnapshots:   0 total\\nTime:        6.676s\\nRan all test suites.\\n\\nWatch Usage: Press w to show more.\\n\"})}),\"\\n\",n(t.h2,{id:\"非同期処理のテスト\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#非同期処理のテスト\",children:\"非同期処理のテスト\"})}),\"\\n\",n(t.p,{children:\"非同期処理のテストは普通のテストとは違い、結果が帰ってくるまで待つ必要があります。\\n非同期処理のテスト方法には2種類あります。\"}),\"\\n\",n(\"br\",{}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.p,{children:\"1.doneを使う方法\"}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=app.test.js\",children:\"test('Async test demo',(done)=>{\\n  setTimeout(() => {\\n      expect(2).toBe(2)\\n      done()\\n  }, 2000);\\n})\\n\"})}),\"\\n\",s(t.p,{children:[n(t.code,{children:\"done()\"}),\"が呼び出されるまで、テストの判定を行わないことをJestに教えることができます。\"]}),\"\\n\",n(\"br\",{}),\"\\n\",n(\"br\",{}),\"\\n\",n(t.p,{children:\"2.async/awaitを使う方法\"}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=app.test.js\",children:\"test('Should add two numbers async/await', async()=>{\\n\\tconst sum = await add(10,22);\\n\\texpect(sum).toBe(32)\\n})\\n\"})}),\"\\n\",n(t.p,{children:\"これは普通のJSのasync/awaitとほとんど同じですね。\"}),\"\\n\",n(t.h2,{id:\"nodejsアプリテストする\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#nodejsアプリテストする\",children:\"Node.jsアプリテストする\"})}),\"\\n\",n(t.p,{children:\"Jestはデフォルトではブラウザでの動作をテストするものなので、Node.jsをテストするのに使うには少し変更を加えなくてはいけません。\"}),\"\\n\",s(t.ul,{children:[\"\\n\",n(t.li,{children:\"testEnviromentの設定\"}),\"\\n\"]}),\"\\n\",n(t.p,{children:\"package.jsonに以下のコードを書き足します。\"}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=package.json\",children:'{\\n\"jest\": {\\n\"testEnvironment\": \"node\" }\\n}\\n'})}),\"\\n\",s(t.ul,{children:[\"\\n\",n(t.li,{children:\"テスト環境の構築\"}),\"\\n\"]}),\"\\n\",s(t.p,{children:[\"開発環境でデータベースと繋がっている場合は、テストする度にデータが追加されていくのを防ぐためにテスト用のDBを用意する必要があります。\\n\",n(t.a,{href:\"https://www.npmjs.com/package/env-cmd\",children:\"cmd-env\"}),\"を用いる場合はルートディレクトリに\",n(t.code,{children:\"config/test.env\"}),\"を追加して、テスト実行用のスクリプトを\"]}),\"\\n\",n(t.p,{children:n(t.code,{children:\"env-cmd ./config/test.env jest --watch\"})}),\"\\n\",n(t.p,{children:\"に変更しましょう。\"}),\"\\n\",n(t.h2,{id:\"expressをテストする\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#expressをテストする\",children:\"Expressをテストする\"})}),\"\\n\",s(t.p,{children:[\"Expressアプリをテストするには\",n(t.a,{href:\"https://www.npmjs.com/package/supertest\",children:\"supertest\"}),\"を使用します。SupertestはExpressの開発チームによって作られたExpress用のテストライブラリです。\\nJestはユニットテストのフレームワークで、supertestはexpressのwebアプリのhttpリクエストレベルでテスト（＝サーバーのテスト）をすることができます。\"]}),\"\\n\",s(t.ul,{children:[\"\\n\",n(t.li,{children:\"まずはsupertestをインストールします。\"}),\"\\n\"]}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-bash:title=terminal\",children:\"$ npm i supertest --save-dev\\n\"})}),\"\\n\",s(t.p,{children:[\"supertestはサーバーが起動していなくてもテストを実行することができます。その場合は\",n(t.code,{children:\"app.listen\"}),\"が実行されないようにコードを書き換える必要があります。\"]}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=app.test.js\",children:'const request = require(\"supertest\");\\nconst app = require(\"express\");\\ntest(\"Should render home page\", async () => {\\n  const response = await request(app)\\n    .get(\"/\")\\n    .expect(200);\\n}\\n'})}),\"\\n\",n(t.p,{children:\"Supertestはステータス・コードでテストの合否を判定します。ルーターで設定したステータス・コードと一致するようにテスト用のコードを書きます。\"}),\"\\n\",n(t.h2,{id:\"jest-lifecycle-method\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#jest-lifecycle-method\",children:\"Jest Lifecycle method\"})}),\"\\n\",s(t.p,{children:[\"テストは毎回同じ状態のDBを使って実行したい。\\nそんな時はJestのLifecycle methodの\",n(t.code,{children:\"beforeEach\"}),\"メソッドを用いて以下のようにすることができます。\\n\",n(t.code,{children:\"beforeEeach\"}),\"メソッドはテストが実行される直前に毎回実行されれます。\"]}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-js:title=app.test.js\",children:'beforeEach(async () => {\\n  await User.deleteMany();\\n  await new User(userOne).save();\\n});\\n\\ntest(\"Should....\",()=>{\\n//テスト内容\\n})\\n'})}),\"\\n\",s(t.p,{children:[\"ここでは、\",n(t.code,{children:\"beforeEach\"}),\"メソッドを用いてDBを一度空にして、ユーザーインスタンスを一つ追加された状態で毎回テストを実行するようにしています。\"]}),\"\\n\",n(t.h2,{id:\"まとめ\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",n(t.p,{children:\"Jestはシンプルにテストを書くことが出来て気に入っています。Reactアプリのテストにも使ったことがあるのですが、Nodeをテストする時と結構書き方が違いました。\"}),\"\\n\",n(t.p,{children:\"そこらへんもまた記事にできたらなと思います。\"}),\"\\n\",n(t.h2,{id:\"参考\",children:n(t.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考\",children:\"参考\"})}),\"\\n\",s(t.ul,{children:[\"\\n\",n(t.li,{children:n(t.a,{href:\"https://sbfl.net/blog/2019/01/20/javascript-unittest/\",children:\"JavaScriptでも単体テストを導入しよう！ってかテストって何？\"})}),\"\\n\",n(t.li,{children:n(t.a,{href:\"https://www.albertgao.xyz/2017/05/24/how-to-test-expressjs-with-jest-and-supertest/\",children:\"How to test Express.js with Jest and Supertest\"})}),\"\\n\",n(t.li,{children:n(t.a,{href:\"https://jestjs.io/docs/en/configuration\",children:\"Configuring jest\"})}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:s}=e.components||{};return s?n(s,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2021/02/20210210-node-jest-test/20210210-node-jest-test"
  },
  {
    "slug": "blog/2021/02/20210214-500-hours-of-learning/20210214-500-hours-of-learning",
    "title": "全くの初心者が500時間プログラミング学習したら？",
    "date": "2021-02-14T00:00:00.000Z",
    "tags": [
      "Journal"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(i){const c={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",p:\"p\",ul:\"ul\",...i.components};return r(n,{children:[e(c.h2,{id:\"はじめに\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#はじめに\",children:\"はじめに\"})}),\"\\n\",e(c.p,{children:\"最近、プログラミング学習時間(Web開発)が累計500時間を超過しました。そこで今回の記事では「HTML & CSSも知らないような初心者が愚直にプログラミングを勉強したらどのぐらいのレベルになるのか」を紹介したいと思います。\"}),\"\\n\",e(c.h2,{id:\"始めた頃の僕の状態\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#始めた頃の僕の状態\",children:\"始めた頃の僕の状態\"})}),\"\\n\",r(c.ul,{children:[\"\\n\",e(c.li,{children:\"ブラインドタッチはできた。\"}),\"\\n\",e(c.li,{children:\"学生の頃、iPhoneを脱獄したりして技術には興味があった。\"}),\"\\n\",e(c.li,{children:\"HTML & CSSは「なんかウェブページを作るのに使うということは知っているけど、読んだことも書いたことも無い」という感じ。\"}),\"\\n\",e(c.li,{children:\"JavaScriptとJavaは同じ言語だと思っていた。\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"というプログラミングに関して全く知識の無いただの「タイピングが速い完全初心者」でした(今もそうかもしれない…）。\"}),\"\\n\",e(c.p,{children:\"始めた頃は何をしていいのか全くわからなったので、まずは情報収集から始めました。\"}),\"\\n\",e(c.h2,{id:\"そもそもプログラミングって何\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#そもそもプログラミングって何\",children:\"そもそもプログラミングって何\"})}),\"\\n\",e(c.p,{children:\"「そもそもプログラミングって何？」という疑問を持って色々ググってみました。調べると、アセンブリ言語、C言語、Ruby, Python, JavaScript ,Go ,Reactなど聞いたこともないアルファベットが永遠に出てきて混乱したのを覚えています。同時に「プログラミング言語それぞれには得意・不得意としている領域があって、プログラマーは目的によって言語を使い分ける」ということを知りました。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"冷蔵庫や洗濯機などの家電にもプログラミングが施されており、それら所謂「組み込み系」といわれるものにはC言語などが使われ、機械学習やAIにはPythonが人気、手っ取り早くウェブサイトを作りたいならRuby on Railsを学ぼう！みたいなことをいろんな記事で読みました。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"現在日本ではプログラミングスクールが乱立し、エンジニアブームと言われていますが、そういった「スクールでプログラミングを学ぶ」ということは「Web制作・開発を学ぶ」ということだということを理解しました。\"}),\"\\n\",e(c.h2,{id:\"まずはprogate\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まずはprogate\",children:\"まずはProgate\"})}),\"\\n\",r(c.p,{children:[\"2021年において、プログラマーに「プログラミングを勉強したいです。なにすればいいですか」と聞くと、ほとんどの人が\",e(c.a,{href:\"https://prog-8.com/\",children:\"Progate\"}),\"しろ、と言います。ですので僕も素直にそれに従いました。HTMLとCSS, JS, Node.js, Ruby, Ruby on Rails, MySQLなどをProgateが進めるコースをひたすら2週間かけてこなしました。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",r(c.p,{children:[\"しかし途中から「こんなにいろんな言語の表面だけ掬うように勉強して意味あるのかな」と思いはじめました。今考えればJavaScriptの\",e(c.code,{children:\"const\"}),\" と\",e(c.code,{children:\"let\"}),\"の違いもよくわかっていないのにNode.jsを理解できるわけがないのに。そんな感じで、一つの言語をしっかり学んでみようと思いProgateは早々に卒業しました。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"Progateは素晴らしいサービスだと思います。しかしこれからプログラミングを学びたいと言う方は別にプロゲートじゃなくても、UdemyでもYouTubeでも色々いい教材がありますし、そこから始めるのもアリだと思います。やる気さえあれば、そこらへんはあまり関係ないと個人的には思います。\"}),\"\\n\",e(c.h2,{id:\"どの言語を学ぶか\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#どの言語を学ぶか\",children:\"どの言語を学ぶか\"})}),\"\\n\",e(c.p,{children:\"Web開発初心者は\"}),\"\\n\",r(c.ul,{children:[\"\\n\",e(c.li,{children:\"フロントエンドとバックエンドどちらをやりたいのか\"}),\"\\n\",e(c.li,{children:\"バックエンドやるならどの言語やるの\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"という2つの決断を割と早い段階で迫られます。\"}),\"\\n\",e(c.p,{children:\"ネットを調べると「ほとんどのプログラミングスクールはRubyを教える」だとか「Web開発初学者はとりあえずRubyやっとけ」というのを多く目にしました。反対に英語で調べてみると、PythonやMERNスタックが人気で「Rubyは下火だからやめとけ」という意見が目立ちました。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"悩んだ結果、「フロントエンド・バックエンドでも両方使えるというJSをできるようにしといて損はないだろう」ということでJSを深く学ぶことにしました。それから今までの4ヶ月間、僕はJS関連の技術の勉強しかしていません。\"}),\"\\n\",e(c.h2,{id:\"どう学ぶのか\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#どう学ぶのか\",children:\"どう学ぶのか\"})}),\"\\n\",e(c.p,{children:\"僕にはスクールに通うという選択肢はありませんでしたので、「Udemyで基本を攫って、あとはググって補完する」という戦略で学び始めました。\\nUdemyでは\"}),\"\\n\",r(c.ul,{children:[\"\\n\",e(c.li,{children:\"HTML & CSS\"}),\"\\n\",e(c.li,{children:\"JavaScript\"}),\"\\n\",e(c.li,{children:\"Node.js\"}),\"\\n\",e(c.li,{children:\"React\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"のコースを終わらせました。正直この500時間のうち半分以上はUdemyに費やしたと思います。それが正しい判断だったかどうかはわかりませんが、チュートリアルをやりまくることのメリットとして「プログラミングのボキャブラリーが増える」というのがあると思います。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"ZennやQittaの記事を見ていても、あぁこれはXXのこの分野の技術の話をしているんだな。ということがわかるようになりました。所謂「チュートリアル地獄」は時間を費やしますが、その分基本が身に付くのでその恩恵は割と遅れてやってくるのかなと思ってます。\"}),\"\\n\",e(c.h2,{id:\"初心者が500時間プログラミング学習したらどうなるのか\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#初心者が500時間プログラミング学習したらどうなるのか\",children:\"初心者が500時間プログラミング学習したらどうなるのか\"})}),\"\\n\",e(c.p,{children:\"結論になりますが、全くの初心者がプログラミングを500時間勉強すると「このブログぐらいのものなら簡単に作れるようになり」ます。というのも、完全オリジナルのポートフォリオが現在このブログぐらいしか無く、客観的に僕の実力を証明するのはこれぐらいしか無いのです。もちろん、もし500時間をRubyやPythonの学習に当てていたらもっと違う領域のスキルが伸びていたでしょう。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"僕の主観で今の僕の実力を測るのなら、一般的なプログラミングスクールの卒業生が作るようなポートフォリオを見て「これなら多分頑張れば僕でも作れるだろう」と調子に乗るレベルです。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",r(c.p,{children:[\"他には今 \",e(c.a,{href:\"https://chingu.io/\",children:\"Chingu\"}),\" というサービスで、世界中からエンジニアを目指している人たちと一緒にプロジェクトを行っているのですが、その中でも特に技術的には問題なくやれています。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"Chinguの参加者を見ていると「長い期間勉強すればするほど実力は伸びる」という感じでもないように思います。数ヶ月しか勉強していないのにすごくできる人もいれば、2年やっているけど基本的なことを理解していない人もいます。そこあたりもまた記事にしたいと思います。\"}),\"\\n\",e(c.h2,{id:\"1000時間を目指して\",children:e(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#1000時間を目指して\",children:\"1000時間を目指して\"})}),\"\\n\",e(c.p,{children:\"プログラミングの学習を始めるにあたり僕は「ある程度できるようになるのに1000時間ほどはかかるだろうな」ということは考えていました。〇〇時間という具体的な指標が欲しかったのです。「1000時間勉強した後に、これぐらいはできるようになりたい」と想像している自分がいて、今はそのような自分になれるように日々淡々と積み重ねています。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(c.p,{children:\"これからも、たまにこうやってチェックポイント毎にふりかえって、成長を実感していきたいと思います。\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/02/20210214-500-hours-of-learning/20210214-500-hours-of-learning"
  },
  {
    "slug": "blog/2021/02/20210219-gatsby-jsonld/20210219-gatsby-jsonld",
    "title": "Gatsbyブログに構造化データを追加する",
    "date": "2021-02-21T00:00:00.000Z",
    "tags": [
      "Gatsby"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(r){const c={a:\"a\",code:\"code\",h2:\"h2\",img:\"img\",p:\"p\",pre:\"pre\",...r.components};return t(e,{children:[n(c.h2,{id:\"構造化データとは\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#構造化データとは\",children:\"構造化データとは\"})}),\"\\n\",n(c.p,{children:'Google などで例えば「ターミネーター」を検索したとすると、上映情報やレビューが表示されます。それらは\"Rich Snippet\"と呼ばれ、それらを充実させると検索結果に自分のページの情報が多く表示されるのでSEO的に有利になります。'}),\"\\n\",n(c.p,{children:n(c.img,{src:\"/static/jsonld-1-66f041.png\",alt:\"terminator\"})}),\"\\n\",n(c.p,{children:\"構造化データにも様々な種類がありますが、Googleが推奨している構造化データの形はJSON-LDといって、JSONの形で構造化データを書くものです。\"}),\"\\n\",n(c.p,{children:\"今回は構造化データをJSON-LDの形でGatsbyブログに追加する方法を紹介します。\"}),\"\\n\",n(c.h2,{id:\"json-ldコンポーネントを用意する\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#json-ldコンポーネントを用意する\",children:\"Json-ldコンポーネントを用意する\"})}),\"\\n\",n(c.p,{children:\"主にこのブログは「ブログ記事」と「トップ画面などのその他のページ」に大別されますので、2つの構造化データコンポーネントを用意します。\"}),\"\\n\",n(c.pre,{children:n(c.code,{className:\"language-js:title=IndexJsonLd.js\",children:'  const jsonLd = {\\n   \"@context\": \"http://schema.org\",\\n   \"@type\": \"WebSite\",\\n   \"image\": {\\n     \"@type\": \"ImageObject\",\\n     url: `${siteUrl}/images/tube.png`,\\n     height: 1200,\\n     width: 630,\\n  },\\n   \"url\": siteUrl,\\n    \"name\": title,\\n    \"author\": {\\n     \"@type\": \"Person\",\\n      \"name\": author,\\n    },\\n    \"description\": description,\\n    publisher,\\n  };\\n'})}),\"\\n\",t(c.p,{children:[n(c.code,{children:\"siteUrl\"}),\"などの変数は\",n(c.code,{children:\"gatsby-config.js\"}),\"から受け取れるようにgrapqhのクエリで指定しておきます。\"]}),\"\\n\",n(c.pre,{children:n(c.code,{className:\"language-js{3}:title=IndexJsonLd.js\",children:' return (\\n   <Helmet>\\n     <script type=\"application/ld+json\">{JSON.stringify(jsonLd)}<\\/script>\\n   </Helmet>\\n )\\n'})}),\"\\n\",n(c.p,{children:\"React-helmetを用いてscriptタグを作成し、必要な場所にコンポーネントを置いておきましょう。\\nこのコンポーネントはroot用なのでindex.jsに置きました。\"}),\"\\n\",n(c.p,{children:\"同じことをブログ用のJSON-LDコンポーネントでも行ます。\"}),\"\\n\",n(c.h2,{id:\"テストツールを用いて確認する\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#テストツールを用いて確認する\",children:\"テストツールを用いて確認する\"})}),\"\\n\",t(c.p,{children:[\"データを正しく設定出来ているかは、\",n(c.a,{href:\"https://search.google.com/structured-data/testing-tool/u/0/?hl=ja\",children:\"google構造化データテスト\"}),\"を用いて確認することができます。必須の項目などもここで確認すると良いでしょう。\"]}),\"\\n\",n(c.p,{children:\"このように不備があれば指定してくれます。\"}),\"\\n\",n(c.p,{children:n(c.img,{src:\"/static/jsonld-2-cb9932.png\",alt:\"jsonld2\"})}),\"\\n\",n(c.h2,{id:\"まとめ\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",n(c.p,{children:\"これでGatsbyブログのSEO対策はひと段落したので、あとは淡々とコンテンツを増やしていきたい。\"}),\"\\n\",n(c.h2,{id:\"参考\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考\",children:\"参考\"})}),\"\\n\",n(c.p,{children:n(c.a,{href:\"https://qiita.com/narumana/items/b66969b80cce848b2ddf\",children:\"Google推奨「JSON-LD」で構造化マークアップ\"})}),\"\\n\",n(c.p,{children:n(c.a,{href:\"https://search.google.com/structured-data/testing-tool/u/0/?hl=ja\",children:\"google構造化データテスト\"})}),\"\\n\",n(c.p,{children:n(c.a,{href:\"https://www.youtube.com/watch?v=BIQGBKXc6AI\",children:\"GatsbyJS: How to Implement Schema Markup on Your Gatsby Site\"})}),\"\\n\",n(c.p,{children:n(c.a,{href:\"https://technicalseo.com/tools/schema-markup-generator/\",children:\"Schema Markup Generator\"})})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2021/02/20210219-gatsby-jsonld/20210219-gatsby-jsonld"
  },
  {
    "slug": "blog/2021/01/blog-refactor-2020-jan/blog-refactor-2020-jan",
    "title": "Gatsbyブログ改修記 2021.01",
    "date": "2021-01-19T00:00:00.000Z",
    "tags": [
      "Gatsby"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(l){const r={a:\"a\",h2:\"h2\",h3:\"h3\",img:\"img\",li:\"li\",p:\"p\",ul:\"ul\",...l.components};return i(n,{children:[e(r.h2,{id:\"ブログを大幅改修した\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ブログを大幅改修した\",children:\"ブログを大幅改修した\"})}),\"\\n\",e(r.p,{children:\"　ずっと手付かずだったブログの改修を行ったので、その記録を残しておきたい。ちなみに最初はこんな感じでした。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:e(r.img,{src:\"/static/kdevelopment-39d7a3.png\",alt:\"最初の頃\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"めっちゃミニマル。\"}),\"\\n\",e(r.h3,{id:\"やったこと一覧\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#やったこと一覧\",children:\"やったこと一覧\"})}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"タグ機能\"}),\"\\n\",e(r.li,{children:\"ページネーション\"}),\"\\n\",e(r.li,{children:\"前後の記事\"}),\"\\n\",e(r.li,{children:\"もくじコンポーネント\"}),\"\\n\",e(r.li,{children:\"絵文字/SVGサムネイル\"}),\"\\n\",e(r.li,{children:\"Google Analytics\"}),\"\\n\",e(r.li,{children:\"デザイン改修\"}),\"\\n\",e(r.li,{children:\"ダークモード\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"　例えばダークモード一つとっても、実装する方法が軽く調べただけで3個ぐらいあって一番良い方法はなんなんだろうと考えるのに結構時間がかかった。普段からいろんなブログを見て勉強しとけば良かった。GitHubに公開されているエンジニアブログのソースコードにはすごく助けられました。\"}),\"\\n\",e(r.h2,{id:\"永遠の改善\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#永遠の改善\",children:\"永遠の改善\"})}),\"\\n\",e(r.p,{children:\"　機能を追加してコードに修正を加えても、次から次へと悪いことが見えてきた。しかし時間には限りがあるのでどこかで区切りをつけることが必要だと思った。\"}),\"\\n\",e(r.p,{children:\"　今回の改修で割と見れるようにはなったと思うので、しばらく機能の追加などはしないでおこうと思う。\"}),\"\\n\",e(r.h2,{id:\"今後追加したいものリスト\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#今後追加したいものリスト\",children:\"今後追加したいものリスト\"})}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"レスポンシブ(もくじ、navbarなど)\"}),\"\\n\",e(r.li,{children:\"タグページのページネーション\"}),\"\\n\",e(r.li,{children:\"月毎の記事\"}),\"\\n\",e(r.li,{children:\"関連記事の表示\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/blog-refactor-2020-jan/blog-refactor-2020-jan"
  },
  {
    "slug": "blog/2021/01/blog-styling-log/blog-styling-log",
    "title": "ブログデザイン格闘記　その1",
    "date": "2021-01-15T00:00:00.000Z",
    "tags": [
      "Design"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(i){const r={a:\"a\",h2:\"h2\",img:\"img\",p:\"p\",...i.components};return a(n,{children:[e(r.h2,{id:\"ブログのデザイン\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ブログのデザイン\",children:\"ブログのデザイン\"})}),\"\\n\",e(r.p,{children:\"1週間ほど前から、このブログの改修を行っている。\\nダークモードやサムネイル、タグ機能からページネーションなどなど結構な量の機能を追加した。それと同時進行でデザインにも手を加えているのだが、これに一番頭を抱えている。\"}),\"\\n\",e(r.p,{children:\"しばらくした頃に「そんなこともあったなぁ」と思い返したいので、これを記事にしようと思った。\"}),\"\\n\",e(r.h2,{id:\"reactアプリをどうスタイルするか\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#reactアプリをどうスタイルするか\",children:\"Reactアプリをどうスタイルするか\"})}),\"\\n\",a(r.p,{children:[\"　Reactアプリをデザインする方法は色々ある。Githubのレポジトリを見ていたりすると、\",e(r.a,{href:\"https://styled-components.com/\",children:\"Styled Components\"}),\"でうまいことデザインしているのを見る。Styled Componentsで書かれたコードはとても読みやすいので試そうかと思ったが、これ以上新しい知識を入れる作業に時間を割きたく無かったのである程度慣れている\",e(r.a,{href:\"https://github.com/css-modules/css-modules\",children:\"CSS Modules\"}),\"でSassを使ってスタイルすることにした。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"　今のところ後悔はしていない。\"}),\"\\n\",e(r.h2,{id:\"最初のデザイン\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#最初のデザイン\",children:\"最初のデザイン\"})}),\"\\n\",a(r.p,{children:[e(r.img,{src:\"/static/kdevelopment-39d7a3.png\",alt:\"kdevelop\"}),\"\\n　改修を始める前のブログはこんな感じだった。超プレーンでこれはこれでかっこいいと思う人もいると思う。僕はあまり気に入ってなかったが。\\nそもそもこれはGatsbyのチュートリアルで完成させたものだったので「自分のもの」という感覚が無かった。なにかデザインをつけたそうと思い、Twemojiを引っ張ってきて適当にくっつけたらこうなった。\"]}),\"\\n\",e(r.h2,{id:\"twemojiを加えた\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#twemojiを加えた\",children:\"Twemojiを加えた\"})}),\"\\n\",e(r.p,{children:e(r.img,{src:\"/static/screenshot1-fad08a.png\",alt:\"最初のころ\"})}),\"\\n\",e(r.p,{children:\"　Twemojiを加えたところ、素っ気なさが減ってダサさが増した。けれども自分のものを自分の責任でいじるのは楽しかった。JSXは好きだけれども、スタイルするのはややこしい。HTMLがあってそれにCSSを足していく単純な世界から、いくつものコンポーネントにそれぞれスタイルを加えつつ、全体のバランスを保つのがとても難しく感じた。\\n　\"}),\"\\n\",e(r.p,{children:\"問題はまだ機能の追加が終わっていないのでデザインに専念できないということだった。結局このTwemojiスタイルはダークモードの導入によりボツになる。\"}),\"\\n\",e(r.h2,{id:\"dark-mode\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#dark-mode\",children:\"Dark Mode\"})}),\"\\n\",e(r.p,{children:e(r.img,{src:\"/static/screenshot3-8d2be3.png\",alt:\"darkmode\"})}),\"\\n\",e(r.p,{children:\"　ダークモードを導入した。ダークモードって良いですよね。常に画面と向き合っているエンジニアには必須の機能だと思います。僕はスマホもPCも全部ダークモードをデフォルト設定してます。(テキストエディタでライトモードを使ってるエンジニアとかいるのかな笑)\"}),\"\\n\",e(r.p,{children:\"　ブログにダークモードを導入した理由は単純に僕が他の人のブログを訪れた時そのサイトがダークモードを備えているととてもありがたいと思うからだ。特に技術記事を読む時はコードを長い間眺めて理解しようとするので、すごく目が疲れる。\"}),\"\\n\",a(r.p,{children:[\"　ダークモードの導入は悩んだ結果\",e(r.a,{href:\"https://www.gatsbyjs.com/plugins/gatsby-plugin-dark-mode/\",children:\"Gatsbyのプラグイン\"}),\"で導入した。\"]}),\"\\n\",e(r.h2,{id:\"読みやすいブログを目指して\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#読みやすいブログを目指して\",children:\"読みやすいブログを目指して\"})}),\"\\n\",e(r.p,{children:e(r.img,{src:\"/static/screenshot4-f3aa35.png\",alt:\"text\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"　Markdownから生成されるHTMLに何もスタイルを加えないとこんな感じになる。とても読めた物ではない。読みやすいline-hightやfont-sizeやfont-familyなどは、ブログのレイアウトや色とかによって色々変わってくると思う。そういった細かいものは、記事を増やしながら修正していきたい。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"　(この記事にはいつかこのブログも見れるようなレベルになった時、初学者の方がこの記事を見て「このブログも最初はポンコツだったんだし、私も頑張ればいけるやろ」と思わせたいという思惑がある。)\"})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/blog-styling-log/blog-styling-log"
  },
  {
    "slug": "blog/2021/01/gatsby-adding-toc/gatsby-adding-toc",
    "title": "Gatsby.js ブログ記事に目次を追加する",
    "date": "2021-01-13T00:00:00.000Z",
    "tags": [
      "Gatsby"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(r){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return a(n,{children:[e(l.h2,{id:\"目標\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#目標\",children:\"目標\"})}),\"\\n\",e(l.p,{children:\"Gatsby製のブログにTable of Content風の目次を追加したい。\\nその際コンポーネントにして任意の場所に設置できるようにしたい。\"}),\"\\n\",e(l.h2,{id:\"gatsby-remark-autolink-headers-plugin\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#gatsby-remark-autolink-headers-plugin\",children:\"gatsby-remark-autolink-headers plugin\"})}),\"\\n\",a(l.p,{children:[e(l.a,{href:\"https://www.gatsbyjs.com/plugins/gatsby-remark-autolink-headers/\",children:\"gatsby-remark-autolink-headers\"}),\"は\"]}),\"\\n\",a(l.ul,{children:[\"\\n\",e(l.li,{children:\"見出しタグにidを振る\"}),\"\\n\",e(l.li,{children:\"自動で目次を作成してくれる(なぜだか僕の場合は間違ったslugが作成されて使えず…)\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(l.p,{children:\"をしてくれる。\"}),\"\\n\",e(l.h3,{id:\"プラグインのインストール\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#プラグインのインストール\",children:\"プラグインのインストール\"})}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-bash:title=console\",children:\"npm install gatsby-remark-autolink-headers\\n\"})}),\"\\n\",e(l.h3,{id:\"gatsby-configjsに追加\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#gatsby-configjsに追加\",children:\"Gatsby-config.jsに追加\"})}),\"\\n\",e(l.p,{children:\"Gatsby-remark-autolink-headersはgatsby-transformer-remarkのサブプラグインなので、オプションプラグインに追加します。\\nそしてこの際、gatsby-remark-prismjsを導入している際はそれより前に追加するようにと公式ドキュメントには書かれています。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js{5}:title=gatsby-config.js\",children:'{\\nresolve: \"gatsby-transformer-remark\",\\noptions: {\\nplugins: [\\n\"gatsby-remark-autolink-headers\",\\n\"gatsby-remark-code-titles\",\\n\"gatsby-remark-prismjs\",\\n}\\n'})}),\"\\n\",e(l.h2,{id:\"slug問題\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#slug問題\",children:\"slug問題\"})}),\"\\n\",e(l.p,{children:\"ここで少し問題が。\\ngatsby-remark-autolink-headersがGraphQLに追加してくれたTableOfContentが自動的に生成してくれるリンクが正しく無いのでこれが使えないことが判明。解決法を探してもよかったのだが、自前で作ることにした。\"}),\"\\n\",e(l.h2,{id:\"react-scrollのインストール\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#react-scrollのインストール\",children:\"React-scrollのインストール\"})}),\"\\n\",a(l.p,{children:[\"見出しをクリックするとスムーズスクロールして該当箇所にまで移動してくれる機能をつけたいので\",e(l.a,{href:\"https://www.npmjs.com/package/react-scroll\",children:\"react-scroll\"}),\"というnpmパッケージをインストールする。\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-bash:title=console\",children:\"npm install react-scroll\\n\"})}),\"\\n\",e(l.p,{children:\"※Gatsby Linkでも実装できますので、Smooth scrollingが必要ないと思う方は飛ばしてください。\"}),\"\\n\",e(l.h2,{id:\"目次コンポーネントの作成\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#目次コンポーネントの作成\",children:\"目次コンポーネントの作成\"})}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js{14,15,16}:title=tableOfContents.js\",children:'import React from \"react\"\\nimport { Link } from \"react-scroll\"\\nimport tableOfContentsStyles from \"./tableOfContents.module.scss\"\\n  \\nconst TableOfContents = props => {\\nreturn (\\n<div className={tableOfContentsStyles.tableOfContents}>\\n<h2 className ={tableOfContentsStyles.title}>目次</h2>\\n\\n{props.headings.map(heading => (\\n<Link\\n\\nsmooth={true}\\nto={heading.id}\\n//--Gatsby Link の場合\\n//to={`/blog/${props.slug}/#${heading.id}`}\\n\\nduration={1000}\\nclassName={tableOfContentsStyles.heading}\\n\\n>\\n{heading.value}\\n</Link>\\n))}\\n\\n</div>\\n)\\n}\\n\\nexport default TableOfContents\\n\\n'})}),\"\\n\",e(l.p,{children:\"h1,h2,h3など見出しの大きさは無視した目次を作成したいので、見出しを全て拾ってきて、react-scrollのLinkを作成しました。\\nこの際toプロパティはurlではなく、見出しの名前に設定します。\\n※Gatsby Linkの場合はurlで記入。\"}),\"\\n\",e(l.h2,{id:\"blog-templateコンポーネントにtocを挿入\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#blog-templateコンポーネントにtocを挿入\",children:\"Blog TemplateコンポーネントにTOCを挿入\"})}),\"\\n\",e(l.p,{children:\"この際、markdownRemarkのgraphQLにてheadingとidを指定しないと動かない。\"})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/gatsby-adding-toc/gatsby-adding-toc"
  },
  {
    "slug": "blog/2021/01/gatsby-blog-emoji-thumbnail/gatsby-blog-emoji-thumbnail",
    "title": "Gatsby.js ブログのサムネイルで絵文字を使う",
    "date": "2021-01-14T00:00:00.000Z",
    "tags": [
      "Gatsby"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:a}=arguments[0];function _createMdxContent(i){const r={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...i.components};return a(e,{children:[n(r.h2,{id:\"目標\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#目標\",children:\"目標\"})}),\"\\n\",n(r.p,{children:\"記事一覧とブログ記事のトップに画像サムネイルの代わりにTwemojiを用いた絵文字サムネイルをつける。\"}),\"\\n\",n(r.h2,{id:\"使うツール\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#使うツール\",children:\"使うツール\"})}),\"\\n\",n(r.p,{children:n(r.a,{href:\"https://github.com/tommoor/react-emoji-render#readme\",children:\"react-emoji-render\"})}),\"\\n\",n(r.pre,{children:n(r.code,{className:\"language-bash:title=terminal\",children:\"npm install react-emoji-render\\n\"})}),\"\\n\",n(r.h2,{id:\"twemoji\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#twemoji\",children:\"Twemoji\"})}),\"\\n\",n(r.p,{children:\"絵文字TwemojiというTwitterが運営するライブラリを使用する。\"}),\"\\n\",n(r.h2,{id:\"マークダウンでの設定\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#マークダウンでの設定\",children:\"マークダウンでの設定\"})}),\"\\n\",n(r.p,{children:\"記事ごとにそれっぽい絵文字を指定します。\\nフロントマターにemoji項目を追加します。書き忘れた時は💻が自動挿入されます。\"}),\"\\n\",n(r.pre,{children:n(r.code,{className:\"language-markdown:title=article.md\",children:'ーーー\\ntitle: \"Gatsby.js ブログ記事に目次を追加する\"\\ndate: \"2021-01-14\"\\ntags: [\"Gatsby\"]\\nemoji: \"🐱\"\\nーーー\\n'})}),\"\\n\",n(r.h2,{id:\"graphqlクエリの追加\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#graphqlクエリの追加\",children:\"GraphQLクエリの追加\"})}),\"\\n\",n(r.p,{children:\"garphQLのクエリでも、frontmatter.emojiを追加します。\"}),\"\\n\",n(r.h2,{id:\"テンプレートに追加\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#テンプレートに追加\",children:\"テンプレートに追加\"})}),\"\\n\",a(r.ol,{children:[\"\\n\",n(r.li,{children:\"ブログ記事\"}),\"\\n\",n(r.li,{children:\"ブログ記事一覧\"}),\"\\n\"]}),\"\\n\",n(r.p,{children:\"の２箇所に追加します。\"}),\"\\n\",n(r.pre,{children:n(r.code,{className:\"language-jsx:title=blogTemplate.js\",children:\"import { Twemoji } from 'react-emoji-render';\\n//...\\n<Twemoji\\nsvg\\ntext={props.data.markdownRemark.frontmatter.emoji || \\\"💻\\\"}\\n/>\\n\\n//...\\n\"})}),\"\\n\",n(r.h2,{id:\"まとめ\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",n(r.p,{children:\"ブログのサムネイルは欲しいけど毎回良い感じの画像を生成するのが面倒だという方にとっては良いアイデアだと思います。\"}),\"\\n\",n(r.h2,{id:\"参考にさせていただきました\",children:n(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考にさせていただきました\",children:\"参考にさせていただきました\"})}),\"\\n\",a(r.ul,{children:[\"\\n\",n(r.li,{children:n(r.a,{href:\"https://catnose99.com/blazing-fast-writing/\",children:\"CatKnowsさん\"})}),\"\\n\",n(r.li,{children:n(r.a,{href:\"https://kikunantoka.com/2020/07/17--add-eyecatch/\",children:\"キクナントカさん\"})}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:a}=e.components||{};return a?n(a,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2021/01/gatsby-blog-emoji-thumbnail/gatsby-blog-emoji-thumbnail"
  },
  {
    "slug": "blog/2021/01/gatsby-prism-how-to-install/gatsby-prismjs-how-to-install",
    "title": "Gatsby.js Prismjsプラグインでシンタックスハイライトを追加する",
    "date": "2021-01-11T00:00:00.000Z",
    "tags": [
      "Gatsby"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(i){const a={a:\"a\",code:\"code\",em:\"em\",h2:\"h2\",h3:\"h3\",img:\"img\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...i.components};return r(n,{children:[e(a.h2,{id:\"目標\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#目標\",children:\"目標\"})}),\"\\n\",e(a.p,{children:\"以下のようにブログポストに参考コードを入れたい時にわかりやすい様にテーマを適応したい。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-javascript:title=test.js\",children:\"const test = ()=>{\\nreturn true\\n}\\n\"})}),\"\\n\",r(a.p,{children:[\"今回は\",e(a.a,{href:\"https://prismjs.com/\",children:\"prismjs\"}),\"というJavascriptのライブラリのGatsbyプラグインを用いて実装する。\"]}),\"\\n\",e(a.h2,{id:\"必要なプラグインのインストール\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#必要なプラグインのインストール\",children:\"必要なプラグインのインストール\"})}),\"\\n\",r(a.ul,{children:[\"\\n\",e(a.li,{children:e(a.a,{href:\"https://www.gatsbyjs.com/plugins/gatsby-remark-prismjs/\",children:\"gatsby-remark-prismjs\"})}),\"\\n\"]}),\"\\n\",e(a.p,{children:\"コードにシンタックスハイライトを適用する。\"}),\"\\n\",r(a.ul,{children:[\"\\n\",e(a.li,{children:e(a.a,{href:\"https://www.gatsbyjs.com/plugins/gatsby-remark-code-titles/?=prism%20title\",children:\"gatsby-remark-code-titles\"})}),\"\\n\"]}),\"\\n\",e(a.p,{children:\"ハイライトにタイトルをつけるプラグイン\"}),\"\\n\",e(a.p,{children:\"まずはパッケージをターミナルからインストールする。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-shell:title=terminal\",children:\"$ npm install prismjs gatsby-remark-prismjs gatsby-remark-code-titles\\n\"})}),\"\\n\",e(a.h3,{id:\"gatsby-configの設定\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#gatsby-configの設定\",children:\"gatsby-configの設定\"})}),\"\\n\",e(a.p,{children:\"インストールしたら、gatsby-config.jsにプラグインの情報を追加する。マークダウンで記事を管理している場合はgatsby-transformer-remarkが導入されているはずなので、それのoptionとしてインストールした2つのプラグインを追加する。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-javascript{6,7}:title=gatsby-config.js\",children:'//...中略\\n{\\n      resolve: \"gatsby-transformer-remark\",\\n      options: {\\n        plugins: [\\n          \"gatsby-remark-code-titles\",\\n          \"gatsby-remark-prismjs\",\\n          {\\n//...中略\\n'})}),\"\\n\",e(a.p,{children:\"この時、gatsby-remark-code-titleはgatsby-remark-prismjsより先に記入する必要がある。\\nPrismjsは様々なテーマを提供していて、公式サイトで確認することができる。\"}),\"\\n\",e(a.h3,{id:\"テーマの適用\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#テーマの適用\",children:\"テーマの適用\"})}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-javascript:title=blog-template.js\",children:'import \"prismjs/themes/prism-tomorrow.css\"\\n'})}),\"\\n\",e(a.p,{children:\"以上で導入は完了。しかしこの状態はあまり美しくないのでCSSを少し修正する必要がある。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:e(a.em,{children:\"どれが本文でどれがファイル名か見分けがつかない。\"})}),\"\\n\",e(a.p,{children:e(a.img,{src:\"/static/screenshot-776a9f.png\",alt:\"Test\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.h3,{id:\"スタイルを追加\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#スタイルを追加\",children:\"スタイルを追加\"})}),\"\\n\",e(a.p,{children:\"素の状態だとあまりにも素っ気ないので、CSSを追加した。\\n最初はブログテンプレートのCSSに記入したが、適応されず。\\nどうやらグローバルスタイルに記入しないといけない模様。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-css:title=global.css\",children:\".gatsby-code-title {\\n  background: #5555;\\n  color: #ffffff;\\n  margin-bottom: -1rem;\\n  padding: 1rem;\\n  font-size: 0.9rem;\\n  line-height: 0.3;\\n  font-weight: 800;\\n  border-radius: 5px 5px 0 0;\\n  display: table;\\n}\\n\"})}),\"\\n\",r(a.p,{children:[\"コードのタイトルのスタイルは\",e(a.code,{children:\"gatsby-code-title\"}),\"クラスで、\\nPrismjsのスタイルは\",e(a.code,{children:\"gatsby-highlight\"}),\"クラスでそれぞれ指定することができる。\"]}),\"\\n\",e(a.h2,{id:\"まとめ\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",e(a.p,{children:\"シンタックスハイライト無しでのコードは読めたものでは無いので、このブログにとっては必須のプラグインだ。\\n導入も簡単なのでおすすめです。\"}),\"\\n\",e(a.p,{children:\"では。\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/gatsby-prism-how-to-install/gatsby-prismjs-how-to-install"
  },
  {
    "slug": "blog/2021/01/prev-next-link-to-gatsby20210109/prev-next-link-to-gatsby20210109",
    "title": "Gatsby製ブログ記事で前後の記事を表示させる",
    "date": "2021-01-09T00:00:00.000Z",
    "tags": [
      "Gatsby"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:t}=arguments[0];function _createMdxContent(r){const a={a:\"a\",blockquote:\"blockquote\",code:\"code\",h3:\"h3\",p:\"p\",pre:\"pre\",...r.components};return t(n,{children:[e(a.p,{children:\"Gatsby製のブログで記事の最後に前後記事へのリンクを追加したので、方法を紹介します。\"}),\"\\n\",e(a.h3,{id:\"まずはgatsby-nodejsでデータを得る\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まずはgatsby-nodejsでデータを得る\",children:\"まずはgatsby-node.jsでデータを得る\"})}),\"\\n\",e(a.p,{children:\"　GraphQLで前後の記事のデータを取得します。それぞれnext,prevで指定できます。このブログではマークダウンのファイル名をslugとして利用しているので、slugとtitleを指定。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-javascript:title=prismjs.js\",children:\"  const res = await graphql(`\\n    {\\n      postsRemark: allMarkdownRemark(\\n        sort: { order: DESC, fields: [frontmatter___date] }\\n        limit: 2000\\n      ) {\\n        edges {\\n          node {\\n            fields {\\n              slug\\n            }\\n            frontmatter {\\n              tags\\n            }\\n          }\\n          next {\\n            fields {\\n              slug\\n            }\\n            frontmatter {\\n              title\\n            }\\n          }\\n          prev: previous {\\n            fields {\\n              slug\\n            }\\n            frontmatter {\\n              title\\n            }\\n          }\\n        }\\n      }\\n\\t  //...省略\\n\\t  }\\n\"})}),\"\\n\",t(a.blockquote,{children:[\"\\n\",e(a.p,{children:\"ここでpostRemarkとなっているのは同じクエリ内にタグを指定する別のallMarkdownRemarkがあるからです。\"}),\"\\n\"]}),\"\\n\",e(a.p,{children:\"ブログテンプレートに前後記事のデータをpropsとして渡します。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-JavaScript:title=gatsby-node.js\",children:\" res.data.postsRemark.edges.forEach(edge => {\\n    createPage({\\n      component: blogTemplate,\\n      path: `/blog/${edge.node.fields.slug}`,\\n      context: {\\n        slug: edge.node.fields.slug,\\n        next: edge.next,\\n        prev: edge.prev,\\n      },\\n    })\\n  })\\n\"})}),\"\\n\",e(a.h3,{id:\"ブログテンプレートの編集\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ブログテンプレートの編集\",children:\"ブログテンプレートの編集\"})}),\"\\n\",e(a.p,{children:\"next,prevは props.pageContext経由で取得できます。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-JavaScript:title=blogTemplate.js\",children:\"\\t//...省略\\n      <div>\\n        {props.pageContext.prev && (\\n          <Link to={`/blog/${props.pageContext.prev.fields.slug}`}>\\n            {props.pageContext.prev.frontmatter.title}\\n          </Link>\\n        )}\\n        <br />\\n        {props.pageContext.next && (\\n          <Link to={`/blog/${props.pageContext.next.fields.slug}`}>\\n            {props.pageContext.next.frontmatter.title}\\n          </Link>\\n        )}\\n      </div>\\n\"})}),\"\\n\",e(a.p,{children:\"以上になります。\\nstarterによっては、初めから導入されている機能かもしれませんが、ブログには欠かせないものだと思います。\"}),\"\\n\",e(a.p,{children:\"参考になれば幸いです。それでは。\"})]})}return{default:function(n={}){const{wrapper:t}=n.components||{};return t?e(t,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/prev-next-link-to-gatsby20210109/prev-next-link-to-gatsby20210109"
  },
  {
    "slug": "blog/2021/01/setting-svg-file-as-hero/setting-svg-file-as-hero",
    "title": "Gatsby ブログのサムネイルにSVGを利用する",
    "date": "2021-01-17T00:00:00.000Z",
    "tags": [
      "Gatsby"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(i){const a={a:\"a\",code:\"code\",h2:\"h2\",img:\"img\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...i.components};return r(n,{children:[e(a.h2,{id:\"目標\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#目標\",children:\"目標\"})}),\"\\n\",r(a.p,{children:[\"　以前\",e(a.a,{href:\"https://k-log.netlify.app/blog/gatsby-blog-emoji-thumbnail\",children:\"GatsbyブログでTwemojiを利用して絵文字サムネイルを作成する方法\"}),\"を紹介したが、絵文字だけでは例えば「JavaScriptの配列」だとか「Reactのライブラリ」を直感的に表現することは難しいと思った。そこで今回はSVG画像をサムネイルと記事のトップ画像として表示させる方法を紹介したい。\"]}),\"\\n\",e(a.h2,{id:\"svgファイルを用意する\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#svgファイルを用意する\",children:\"SVGファイルを用意する\"})}),\"\\n\",e(a.p,{children:\"　SVGファイルが必要です。\"}),\"\\n\",e(a.p,{children:\"僕は\"}),\"\\n\",e(\"br\",{}),\"\\n\",r(a.ul,{children:[\"\\n\",e(a.li,{children:e(a.a,{href:\"https://worldvectorlogo.com/downloaded/react-2\",children:\"World Vecotor logo\"})}),\"\\n\",e(a.li,{children:e(a.a,{href:\"https://www.flaticon.com/\",children:\"Flaticon\"})}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"などで探してます。ライセンスに注意してください。\"}),\"\\n\",e(a.p,{children:\"記事のMarkdownと同じディレクトリにSVGを配置して、MDのfrontmatterにheroを追加します。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-markdown:title=記事.md\",children:'ーーー\\ntitle: \"SVGのテスト\"\\ndate: \"2021-01-16\"\\ntags: [\"Gatsby\"]\\nhero: ./react.svg\\nーーー\\n'})}),\"\\n\",e(a.h2,{id:\"ブログ一覧のgraphqlにheroを追加\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ブログ一覧のgraphqlにheroを追加\",children:\"ブログ一覧のgraphQLにheroを追加\"})}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-js{18,19}:title=blog-list.js\",children:\"export const blogListQuery = graphql`\\n  query blogListQuery($skip: Int!, $limit: Int!) {\\n    allMarkdownRemark(\\n      sort: { fields: [frontmatter___date], order: DESC }\\n      limit: $limit\\n      skip: $skip\\n    ) {\\n      edges {\\n        node {\\n          fields {\\n            slug\\n          }\\n          frontmatter {\\n            title\\n            date\\n            tags\\n            emoji\\n            hero {\\n              publicURL\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n\"})}),\"\\n\",e(a.p,{children:\"必要なのはpublicURLだけですのでそれを入手します。\"}),\"\\n\",e(a.h2,{id:\"ブログ一覧テンプレートにimg要素を追加する\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ブログ一覧テンプレートにimg要素を追加する\",children:\"ブログ一覧テンプレートにimg要素を追加する\"})}),\"\\n\",e(a.p,{children:\"　SVGと絵文字を両方使いたいので、絵文字を設定した時は絵文字を、svgを設定した時はSVGがレンダーされるようにしました。\"}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-js{4,5,6,7}:title=blog-list.js\",children:'{node.frontmatter.hero ? \\n(\\n  <div className={blogIndexStyles.postIcon}>\\n    <img\\n      src={node.frontmatter.hero.publicURL}\\n       alt=\"SVGicon\"\\n     />\\n  </div>\\n) : (\\n  <Twemoji\\n    className={blogIndexStyles.postCardEmoji}\\n    svg\\n    text={node.frontmatter.emoji || \"📝\"}\\n  />\\n)}\\n'})}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"　無事、Reactのロゴを表示させることができました。\"}),\"\\n\",e(a.p,{children:e(a.img,{src:\"/static/Screenshot-eadafc.png\",alt:\"screenshot\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(a.p,{children:\"　これと同じことをブログポストのテンプレートでも行う必要がありますが、作業は全く同じです。\"}),\"\\n\",e(a.h2,{id:\"まとめ\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",e(a.p,{children:\"　最初はgatsby-imageを使って表示させようとしたのですが、gatby-imageはSVG非対応でした。\\nPNGとかJPEGなどに比べるとSVGはファイルサイズが小さいのがメリットだと思います。(Netlifyの無料ビルト時間制限にひたすらビビっている)\"}),\"\\n\",e(a.h2,{id:\"参考\",children:e(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考\",children:\"参考\"})}),\"\\n\",e(a.p,{children:e(a.a,{href:\"https://github.com/gatsbyjs/gatsby/issues/10297\",children:\"Githubのissue\"})})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/setting-svg-file-as-hero/setting-svg-file-as-hero"
  },
  {
    "slug": "blog/2021/01/react-icon-gatsby/react-icon-gatsby",
    "title": "React-iconsで簡単にサイトにアイコンを追加する",
    "date": "2021-01-16T00:00:00.000Z",
    "tags": [
      "React"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(a){const r={a:\"a\",code:\"code\",h2:\"h2\",img:\"img\",p:\"p\",pre:\"pre\",...a.components};return i(n,{children:[e(r.h2,{id:\"目標\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#目標\",children:\"目標\"})}),\"\\n\",e(r.p,{children:e(r.img,{src:\"/static/react-icon-ae846b.png\",alt:\"icon\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"このようにFont awsomeのようなアイコンをReact製のサイトに追加したい。\\n今回はGatsby製のサイトに導入する方法を紹介する。\"}),\"\\n\",e(r.h2,{id:\"ライブラリ\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ライブラリ\",children:\"ライブラリ\"})}),\"\\n\",i(r.p,{children:[e(r.a,{href:\"https://react-icons.github.io/react-icons\",children:\"React-icons\"}),\"\\n様々な種類のアイコンを簡単にReactに導入できるライブラリ。\\nFontawsome, Remix iconsなどに対応している。\"]}),\"\\n\",e(r.h2,{id:\"インストール\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#インストール\",children:\"インストール\"})}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-bash:title=console\",children:\"npm install @react-icons/all-files\\n\"})}),\"\\n\",e(r.p,{children:\"npm インストールして使うだけ。今回はTwitterとGithubのアイコンを設置したい。\"}),\"\\n\",e(r.h2,{id:\"使用\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#使用\",children:\"使用\"})}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-js:title=about.js\",children:'import { RiGithubLine } from \"@react-icons/all-files/ri/RiGithubLine\"\\nimport { RiTwitterLine } from \"@react-icons/all-files/ri/RiTwitterLine\"\\n\\n//...\\n\\n<a\\nrel=\"noreferrer\"\\ntarget=\"_blank\"\\n>\\n<RiTwitterLine size=\"3rem\" />\\n</a>\\n\\n<a rel=\"noreferrer\" target=\"_blank\" href\\\\=\"https://github.com/tofujlg\">\\n<RiGithubLine size=\"3rem\" />\\n</a>\\n'})}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:e(r.img,{src:\"/static/react-icon-ae846b.png\",alt:\"icon\"})}),\"\\n\",e(r.p,{children:\"とても簡単に導入できた。\"}),\"\\n\",e(r.h2,{id:\"参考\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考\",children:\"参考\"})}),\"\\n\",e(r.p,{children:e(r.a,{href:\"https://www.youtube.com/watch?v=aor9hlcODUE\",children:\"The best way to use icons in React (with React Icons)\"})})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/react-icon-gatsby/react-icon-gatsby"
  },
  {
    "slug": "blog/2021/01/udemy-node-js-learning-log/udemy-node-js-learning-log",
    "title": "Node.js学習記　その1",
    "date": "2021-01-21T00:00:00.000Z",
    "tags": [
      "Nodejs"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(l){const r={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...l.components};return a(n,{children:[e(r.h2,{id:\"nodejsの学習を始めた\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#nodejsの学習を始めた\",children:\"Node.jsの学習を始めた\"})}),\"\\n\",a(r.p,{children:[\"　Gatsbyブログの制作がひと段落したのでNode.jsの学習を始めた。僕の学習計画は「Gatsbyを理解すること」が中心に置かれている気がする。というのも、そもそもReactやJavaScriptを学びたいと思ったのもGatsbyに出会ったからだし、今回Node.jsを学びたいと思ったのも\",e(r.code,{children:\"gatsby-node.js\"}),\"で何が起こっているのかよくわからなかったというのがあるからだ。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"　前からサーバーサイドをかじってみたいという気持ちはあった。3ヶ月ほど前にRuby on RailsをProgateでやったことがあるが何も覚えていない。サーバーサイドはRubyにPythonなど色々な言語がある。僕はJSが好きなので、JSでできるのならそうしようと、ひとまずNodeを学ぶことを決意した。Pythonはweb開発以外にもできることが多そうなので気になってはいるが、しばらくは見送りたい。\"}),\"\\n\",e(r.p,{children:\"　まだ学習して間も無いが、学んだことをまとめておきたい。\"}),\"\\n\",e(r.h2,{id:\"global--core-メソッド\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#global--core-メソッド\",children:\"Global & Core メソッド\"})}),\"\\n\",a(r.p,{children:[e(r.code,{children:\"console.log\"}),\"などはインポートしなくても使えるGlobalメソッドで、インポートしなくてもすぐに使用することができる。しかし他の多くのメソッドはCoreメソッドと言われ、使用する際にはかならずインポートしなくてはならない。\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-js:title=app.js\",children:'const fs = require(\"fs\");\\nfs.writeFileSync(\"notes.txt\", \"My name is Kebab.\");\\nfs.appendFileSync(\\n\"notes.txt\",\\n\"This is the text added by appendFileSync method.\"\\n);\\n'})}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"これはすごく単純なコードだが、「自分が書いたコードがファイルを作成する」のに少し感動した。\"}),\"\\n\",e(r.h2,{id:\"npm\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#npm\",children:\"npm\"})}),\"\\n\",a(r.p,{children:[\"　毎度おなじみの\",e(r.code,{children:\"npm i blabla\"}),\"。これはもうJSやReactのプロジェクトである程度慣れているが教科書的なことを書いておく。\"]}),\"\\n\",a(r.ol,{children:[\"\\n\",e(r.li,{children:\"初期化\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-bash:title=terminal\",children:\"npm init\\n\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"ここでいくつかの質問に答える。基本は全てenterでOK。\\nプロジェクトのルートディレクトリにpackage.jsonとnode_moduleが作成される。\"}),\"\\n\",a(r.ol,{start:\"2\",children:[\"\\n\",e(r.li,{children:\"パッケージのインストール\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-bash:title=terminal\",children:\"npm install 'package-name'\\n\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"を実行するとpackage.jsonとnode_modulesにインストールしたパッケージが追加される。\"}),\"\\n\",a(r.ol,{start:\"3\",children:[\"\\n\",e(r.li,{children:\"node_modulesとpackage-lock.json\"}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"　これらはnpmが管理してくれるので手動で決して編集するべきではない。\\nnode_modulesにあるコードも全てJSで書かれているので覗いてみたりするが、よくわからない。パッケージとかどうやって作るんだろう。\"}),\"\\n\",e(r.h2,{id:\"jsonとobject\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#jsonとobject\",children:\"JsonとObject\"})}),\"\\n\",e(r.p,{children:\"　JSのデータの種類の中で配列とオブジェクトはそれなりに親しんできた。Node.jsで初めてjsonを触ったのでデータについて書き残しておきたい。　\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-js:title=app.js\",children:'const dataBuffer = fs.readFileSync(\"test.json\");\\nconsole.log(dataBuffer);\\n'})}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"この状態はバイナリデータのままなので\"}),\"\\n\",e(r.p,{children:e(r.code,{children:\"<Buffer 7b 22 6e 61 6d 65 22 3a 22 47 75 6e 74 68 65 72 22 2c 22 70 6c 61 6e 65 74 22 3a 22 45 61 72 74 68 22 2c 22 61 67 65 22 3a 35 34 7d>\"})}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"みたいな数列が得られる。これはJSで使えない。\"}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"次にstringifyしてみると。JSONの形で得られる。\\nJsonはフロントとバックエンドでデータのやりとりをするのに使われるデータの種類で、JSのエコシステムに限らずrubyやpythonでも扱うことができる。\"}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-js:title=app.js\",children:'const dataJSON = dataBuffer.toString();\\nconsole.log(dataJSON);\\n//出力\\n//{\"name\":\"Gunther\",\"planet\":\"Earth\",\"age\":54}\\n'})}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-js:title=app.js\",children:'const user = JSON.parse(dataJSON);\\nuser.name = \"Gunther\";\\nuser.age = 54;\\n'})}),\"\\n\",e(r.p,{children:\"最終的にパースすると、オブジェクトが得られる。\\nこういうふうにオブジェクトの形ならばデータの編集も容易だ。\"}),\"\\n\",e(r.h2,{id:\"新しく使ったパッケージ\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#新しく使ったパッケージ\",children:\"新しく使ったパッケージ\"})}),\"\\n\",a(r.ul,{children:[\"\\n\",e(r.li,{children:e(r.a,{href:\"https://www.npmjs.com/package/yargs\",children:\"yargs\"})}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"コマンドラインパーサー。ヘルプメッセージなどを追加できる。\"}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-js:title=app.js\",children:'yargs.command({\\ncommand: \"remove\",\\ndescribe: \"Remove a note\",\\nhandler: function () {\\nconsole.log(\"Removing the note!\");\\n},\\n});\\n'})}),\"\\n\",a(r.ul,{children:[\"\\n\",e(r.li,{children:e(r.a,{href:\"https://www.npmjs.com/package/chalk\",children:\"chalk\"})}),\"\\n\"]}),\"\\n\",e(\"br\",{}),\"\\n\",e(r.p,{children:\"ターミナルの文字を見やすいように修飾してくれる。\"}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-js:title=app.js\",children:'console.log(chalk.green(\"Hehe\"))\\n'})}),\"\\n\",e(r.h2,{id:\"まとめ\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",e(r.p,{children:\"基本的にはJSを書いているだけという印象。httpとかに入ると難しく感じるのかな。\"})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/udemy-node-js-learning-log/udemy-node-js-learning-log"
  },
  {
    "slug": "blog/2021/01/udemy-node-js-learning-log2/udemy-node-js-learning-log2",
    "title": "Node.js学習記　その2",
    "date": "2021-01-28T00:00:00.000Z",
    "tags": [
      "Nodejs"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(s){const l={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...s.components};return r(e,{children:[n(l.h2,{id:\"はじめに\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#はじめに\",children:\"はじめに\"})}),\"\\n\",n(l.p,{children:\"Node.jsについてさらに学習したことをまとめておきたい。\"}),\"\\n\",n(l.h2,{id:\"http-リクエスト\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#http-リクエスト\",children:\"http リクエスト\"})}),\"\\n\",r(l.p,{children:[\"Web APIを使う場合に\",n(l.a,{href:\"https://www.npmjs.com/package/request\",children:\"request\"}),\"というライブラリを利用してhttpリクエストを行った。\\nAPIから受け取ったデータをコンソールに表示する。\"]}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=app.js\",children:'const request = require(\"request\");\\n\\nconst url =\\n\"API address\";\\nrequest({ url, json: true }, (error, response) => {\\nif (error) {\\n//ネットワークのエラー処理\\nconsole.log(\"Unable to connect to location services\");\\n} else if (response.body.features.length === 0) {\\n// APIエラー処理\\nconsole.log(\"Unable to find the location\");\\n} else {\\nconsole.log(response.body);\\n}\\n});\\n});\\n'})}),\"\\n\",n(l.h2,{id:\"非同期処理とコールバック関数\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#非同期処理とコールバック関数\",children:\"非同期処理とコールバック関数\"})}),\"\\n\",n(l.p,{children:\"APIにリクエストしてデータを受け取るまで時間差があるので、受け取ったデータはコールバック関数で処理しなければならない。「Promise使えないの？」という声が出てきそうだけれどもNode.jsのライブラリはまだコールバックしかサポートしてないものが多いらしい。\"}),\"\\n\",r(l.ul,{children:[\"\\n\",n(l.li,{children:\"簡単なコールバック関数の例\"}),\"\\n\"]}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=callback.js\",children:\"const add = (a, b, callback) => {\\nsetTimeout(() => {\\nconst sum = a + b;\\ncallback(sum);\\n}, 2000);\\n};\\n\\nadd(1, 4, (sum) => {\\nconsole.log(sum); // Should print: 5\\n});\\n\"})}),\"\\n\",n(l.p,{children:\"この場合addが高階関数で、console.logがコールバック関数となる。これぐらい簡単な例なら別にPromiseじゃなくてコールバックでも問題ない。\"}),\"\\n\",n(l.h2,{id:\"es6-object-destructuring\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#es6-object-destructuring\",children:\"ES6 Object Destructuring\"})}),\"\\n\",n(l.p,{children:\"これはReactとかでもよく見る省略だと思う。よく見るシンタックスなので、今一度復習しよう。\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=object.js\",children:'const user = {\\nname: \"John\",\\nlevel: 82,\\ncountry: undefined\\n};\\n'})}),\"\\n\",n(l.p,{children:\"というオブジェクトがあったとする。特定のプロパティを取り出すには、\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=object.js\",children:\"const userLevel = user.level;\\n\"})}),\"\\n\",n(l.p,{children:\"というのが伝統的な書き方だろう。しかしES6ではもっとスマートに書くことができ、かつデフォルトの値も設定することもできる。\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=object.js\",children:\"const { level:userLevel = 1, name, country } = user;\\nconsole.log(userLevel);\\nconsole.log(name);\\n\"})}),\"\\n\",n(l.p,{children:\"関数の引数も予めdestructureしておくことができる。便利。\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=object.js\",children:'const sortUsers = (type, { name, level  }) => {\\nconsole.log(type, name, level);\\n};\\n\\nsortUsers(\"ascend\", user);\\n'})}),\"\\n\",n(l.h2,{id:\"express\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#express\",children:\"Express\"})}),\"\\n\",r(l.p,{children:[n(l.a,{href:\"https://expressjs.com/\",children:\"Express\"}),\"というNode.jsのフレームワークの超基本も学び始めた。Rubyで言うRuby on Railsのようなものなのかな。これはだいぶ前にProgateで触れたことがあったのだが、その頃はJSどころかHTMLすらもよく理解していなかったのでそりゃ理解できるわけもなく記憶から抹消されていた。\"]}),\"\\n\",n(l.h3,{id:\"ルーティング\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ルーティング\",children:\"ルーティング\"})}),\"\\n\",n(l.p,{children:\"Expressの公式ドキュメントはルーティングを以下のように定義している。\"}),\"\\n\",r(l.blockquote,{children:[\"\\n\",n(l.p,{children:\"ルーティングとは、\\nアプリケーションが特定のエンドポイントに対するクライアント要求に応答する方法として、\\nURI (またはパス)と特定のHTTP要求メソッド(GET、POST など)を決定することです。\\n各ルートには1つ以上のハンドラー関数があり、それらはルートが一致したときに実行されます。\\nルート定義では、次の構造を使用します。\"}),\"\\n\"]}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=app.js\",children:\"app.METHOD(PATH, HANDLER)\\n\"})}),\"\\n\",n(l.p,{children:\"appはexpressのインスタンス。\"}),\"\\n\",n(l.p,{children:\"METHODは、HTTP要求メソッド。\"}),\"\\n\",n(l.p,{children:\"PATHは、サーバー上のパス。\"}),\"\\n\",n(l.p,{children:\"HANDLERは、ルートが一致したときに実行される関数。\"}),\"\\n\",n(l.h3,{id:\"基本的なルーティング\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#基本的なルーティング\",children:\"基本的なルーティング\"})}),\"\\n\",n(l.p,{children:\"こんなルーティングはしないだろうけど、説明のためにシンプルなものを用意した。\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=app.js\",children:'const express = require(\"express\");\\nconst app = express();\\n\\napp.get(\"\", (req, res) => {\\n  res.send(\"<h1>home</h1>\");\\n});\\n\\napp.get(\"/about\", (req, res) => {\\n  res.send(\"<h1>About</h1>\");\\n});\\n//サーバーを起動する\\napp.listen(3000, () => {\\n  console.log(\"Server is up on port 3000\");\\n});\\n'})}),\"\\n\",n(l.p,{children:\"ルートページにいくとhomeが、/aboutにいくとAboutが得られるようになった。\\napp.listenでサーバーを起動する。\"}),\"\\n\",n(l.h2,{id:\"handlebars\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#handlebars\",children:\"handlebars\"})}),\"\\n\",r(l.p,{children:[\"テンプレートエンジンの\",n(l.a,{href:\"https://www.npmjs.com/package/handlebars\",children:\"handlebars\"}),\"について学んだ。\\nReactコンポーネントのようなPartialというものを作成しテンプレートとして利用できる。便利。\"]}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-js:title=app.js\",children:'app.set(\"view engine\", \"hbs\");\\napp.set(\"views\", viewsPath);\\nhbs.registerPartials(partialsPath);\\n\\napp.get(\"\", (req, res) => {\\n  res.render(\"index\", {\\n    title: \"home\",\\n  });\\n});\\n'})}),\"\\n\",n(l.p,{children:\"hbsファイルでは下記のように利用する\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-html:title=index.hbs\",children:\"<body>\\n    {{>header}} \\n    {{title}}\\n</body>\\n\"})}),\"\\n\",n(l.h2,{id:\"まとめ\",children:n(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",n(l.p,{children:\"JavaScriptは色々できる。とりあえずMERN stackをまぁまぁできるようになりたい。\"})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2021/01/udemy-node-js-learning-log2/udemy-node-js-learning-log2"
  },
  {
    "slug": "blog/2021/01/udemy-node-js-learning-log3/udemy-node-js-learning-log3",
    "title": "Node.js学習記3 MongoDB",
    "date": "2021-01-31T00:00:00.000Z",
    "tags": [
      "Nodejs"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(o){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...o.components};return r(n,{children:[e(l.h2,{id:\"はじめに\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#はじめに\",children:\"はじめに\"})}),\"\\n\",e(l.p,{children:\"Node.jsの学習をさらに進めたので記録を残しておきたい。今回は新たにMongoDBの学習を始めた。データベースを扱った経験は以前Reactでタスク管理アプリを作った時にfirebaseとつなげた時ぐらいだ。今回もNode.jsで同じ物を作っているのだが、ユーザー体験からしてReactで作った方が快適じゃない？と思った。自分で同じ物をつくるならそうすると思う。\"}),\"\\n\",e(l.h2,{id:\"mongodb\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#mongodb\",children:\"MongoDB\"})}),\"\\n\",e(l.p,{children:\"データベースは大別してSQLとNoSQL(Not Only SQL)があり、MongoDBはNoSQL系の中では一番人気のデータベースだ。\\n両者には以下の違いがある。\"}),\"\\n\",e(l.p,{children:\"SQL:\"}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"Tableにデータが保存される。\"}),\"\\n\",e(l.li,{children:\"Row とColumn\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:\"NoSQL:\"}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"Collectionにデータが保存される\"}),\"\\n\",e(l.li,{children:\"DocumentとField\"}),\"\\n\"]}),\"\\n\",e(l.h2,{id:\"robo-3t\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#robo-3t\",children:\"Robo 3T\"})}),\"\\n\",r(l.p,{children:[\"MongoDBで作成したデータベースを閲覧・編集するのに\",e(l.a,{href:\"https://robomongo.org/\",children:\"Robo3T\"}),\"というデスクトップアプリをインストールした。フロントエンドの開発で使うGUIとかVSCodeぐらいなのでこれが必要なのかと驚いた。\"]}),\"\\n\",e(l.p,{children:\"今のところ、格納されているデータを確認したり不要なデータを消したりするぐらいの使いかたしかしていない。\"}),\"\\n\",e(l.h2,{id:\"mongodbとアプリを繋げる\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#mongodbとアプリを繋げる\",children:\"MongoDBとアプリを繋げる\"})}),\"\\n\",r(l.p,{children:[e(l.code,{children:\"mongodb\"}),\"というMongoDB公式のドライバー/npmパッケージを利用してサーバーとデータベースを接続し、データの操作を行う。しかしこれらの操作は後述するMongooseというライブラリに置き換えられるのでほとんど使わないのだが、記録として残しておきたい。\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:'const mongodb = require(\"mongodb\");\\n\\nconst MongoClient = mongodb.MongoClient;\\nconst connectionUrl = \"URL;\\nconst databaseName = \"Data-name\";\\n\\n// サーバーに接続する\\nMongoClient.connect(\\n  connectionUrl,\\n  { useNewUrlParser: true },\\n  (error, client) => {\\n    if (error) {\\n      return console.log(\"Unable to connect to database!\");\\n    }\\n// データーベースに接続する\\n    const db = client.db(databaseName);\\n\\t//データを追加する\\n    db.collection(\"users\").insertOne({\\n      name: \"Test\",\\n      value: 125,\\n    });\\n  }\\n);\\n'})}),\"\\n\",e(l.h3,{id:\"データ操作\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#データ操作\",children:\"データ操作\"})}),\"\\n\",e(l.p,{children:\"データを追加するとMongoDBが自動でObjectIDというプロパティを追加する。これを利用してドキュメントを取り出すことができるのだが、このIDはストリングでは無いのでそのまま入力してもうまく機能しない。\"}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:'  db.collection(\"users\").findOne(\\n   { _id: new ObjectID(\"6012afe570c0d822118e1518\") },\\n\\t//　ここでただidを入力しても機能しない\\n    //{ _id: \"6012afe570c0d822118e1518\" },\\n'})}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"データを更新する時\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:\"データを更新する時も、operatorというものを途中に挿入しないといけない。MongoDBをそのまま利用するとこのような面倒臭い処理があるのでMongooseを利用するらしい。だいたいの場合はsetというオペレーターで済むらしいが。\"}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:'db.collection(\"tasks\")\\n      .updateMany(\\n        {\\n          completed: false,\\n        },\\n        {\\n          $set: {\\n            completed: true,\\n          },\\n        }\\n      )\\n      .then((result) => {\\n        console.log(result);\\n      })\\n      .catch((error) => {\\n        console.log(error);\\n      });\\n  }\\n'})}),\"\\n\",e(l.h2,{id:\"mongoose\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#mongoose\",children:\"Mongoose\"})}),\"\\n\",r(l.p,{children:[e(l.a,{href:\"https://mongoosejs.com/\",children:\"Mongoose\"}),\"はMongoDBを操作するためのnpmパッケージだ。MongoDBに様々な入力設定をすることができる。今回はuserとtaskという二つのモデルを作成した。\"]}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"MongoDBのポート&コレクションに接続。第2引数でオプションを設定する。\"}),\"\\n\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:\"const mongoose = require('mongoose')\\nmongoose.connect('mongodb://127.0.0.1:27017/task-manager', { useNewUrlParser: true,\\nuseCreateIndex: true\\n})\\n\"})}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"モデルの作成\"}),\"\\n\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:\"const User = mongoose.model('User', { \\n\\tname: {\\n        type: String\\n    \\t},\\n \\tage: {\\n        type: Number\\n} })\\n\"})}),\"\\n\",e(l.p,{children:\"このようにプロパティの型を定義することでそれ以外のデータを受け取った時にエラーを投げてくれる。\"}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"インスタンスの作成\"}),\"\\n\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:\"const me = new User({ name: 'Totoro',\\nage: 8 })\\n\"})}),\"\\n\",e(l.p,{children:\"モデルをもとにしてインスタンスを作成することができる。\"}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"インスタンスを保存する\"}),\"\\n\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:\"me.save().then(() => { console.log(me)\\n}).catch((error) => { console.log('Error!', error)\\n})\\n\"})}),\"\\n\",e(l.h2,{id:\"rest-api\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#rest-api\",children:\"REST API\"})}),\"\\n\",e(l.p,{children:\"Representational State Transferの略。データベースを操作するAPIらしい。\\n同じAPIでもGooglemap APIなどといった具体的なアプリケーションではなく設計思想だ。\"}),\"\\n\",r(l.p,{children:[\"データ操作の種類総称として\",e(l.code,{children:\"CRUD\"}),\"と言うものがあり、それぞれの以下の操作の頭文字をとっている。\"]}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"Create\"}),\"\\n\",e(l.li,{children:\"Read\"}),\"\\n\",e(l.li,{children:\"Update\"}),\"\\n\",e(l.li,{children:\"Delete\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:\"そしてそれらの操作とURLを紐づける時、例えば\"}),\"\\n\",e(l.pre,{children:e(l.code,{children:\"http://test.com/user1/create\\nhttp://test.com/user1/read/\\nhttp://test.com/user1/Update/\\nhttp://test.com/user1/Delete/\\n\"})}),\"\\n\",e(l.p,{children:\"とすることができる。しかしこれはRESTの思想と相反するらしい。\\nREST主張としては、URLはあくまで「どのようなリソースを扱っているのか」に限るべきなのだ。\\nだからこれらは全て\"}),\"\\n\",e(l.pre,{children:e(l.code,{children:\"http://test.com/user1\\n\"})}),\"\\n\",r(l.p,{children:[\"と表示して、それぞれの操作はhttpのリクエストメソッドで峻別すれば良い。これだけがRESTの定義ではなく\",e(l.a,{href:\"https://e-words.jp/w/REST.html\",children:\"他にもいろいろある\"}),\"が今回はこれぐらいで…。\"]}),\"\\n\",e(l.h2,{id:\"mongooseを使ったcrud操作\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#mongooseを使ったcrud操作\",children:\"Mongooseを使ったCRUD操作\"})}),\"\\n\",e(l.p,{children:\"httpのメソッドはそれぞれ\"}),\"\\n\",e(l.pre,{children:e(l.code,{children:\"Create => post\\nRead => Get\\nUpdate => Patch\\nDelete => Delete\\n\"})}),\"\\n\",e(l.p,{children:\"となる。\"}),\"\\n\",r(l.p,{children:[\"また、httpリクエストの管理するツールには\",e(l.a,{href:\"https://www.postman.com/\",children:\"Postman\"}),\"を利用した。便利\"]}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"POSTメソッドデ新しいユーザーを作成する。\"}),\"\\n\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:\"//Jsonでデータを受け取るため\\napp.use(express.json())\\n//新しいユーザーインスタンスの追加\\napp.post('/users', (req, res) => {\\nconst user = new User(req.body)\\nuser.save().then(() => { res.send(user)\\n}).catch((e) => { res.status(400).send(e)\\n}) })\\n\"})}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"async/awaitでより読みやすく書くことができる。\"}),\"\\n\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-js:title=app.js\",children:'app.post(\"/users\", async (req, res) => {\\n  const user = new User(req.body);\\n  try {\\n    await user.save();\\n    res.status(201).send(user);\\n  } catch (e) {\\n    res.status(400).send(e);\\n  }\\n});\\n'})}),\"\\n\",e(l.h2,{id:\"まとめ\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",e(l.p,{children:\"Web開発なのにほとんどブラウザを使うことがなかった。チュートリアルを進めていて、特に難しいと思ったことは無いのだが、それは敷かれたレールの上を進んでいるだけであって、自分で設計するとなるとかなり難しくなりそう。最近はプログラミングの難しさはコーディングより設計なのでは、と思っている。\"}),\"\\n\",e(l.h2,{id:\"参考\",children:e(l.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考\",children:\"参考\"})}),\"\\n\",r(l.p,{children:[e(l.a,{href:\"https://qiita.com/masato44gm/items/dffb8281536ad321fb08\",children:\"Qitta:0からREST APIについて調べてみた\"}),\"\\n\",e(l.a,{href:\"https://www.subthread.co.jp/blog/20160506/\",children:\"REST (API)が理解できないのでまとめてみる\"})]})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2021/01/udemy-node-js-learning-log3/udemy-node-js-learning-log3"
  },
  {
    "slug": "blog/2021/01/udemy-react-course/udemy-react-course",
    "title": "Udemy React Developer Courseを終えて",
    "date": "2021-01-04T00:00:00.000Z",
    "tags": [
      "React"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:a}=arguments[0];function _createMdxContent(r){const c={a:\"a\",h2:\"h2\",h3:\"h3\",p:\"p\",...r.components};return a(e,{children:[n(c.p,{children:\"Udemy の初心者用の React 学習コース「The Complete React Developer Course 」を終えたので、感想を書き残しておきたい。\"}),\"\\n\",n(c.p,{children:\"このコースの講師は Andrew Mead という方で、僕は YouTube の Gatsby のチュートリアル動画をきっかけで知った。エンジニアっぽくない説明が好きで、この React のコースの他にも 2 つ別のコースを購入してしまった。\"}),\"\\n\",n(c.h3,{id:\"jsx-シンタックスについて\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#jsx-シンタックスについて\",children:\"JSX シンタックスについて\"})}),\"\\n\",n(c.p,{children:\"この JavaScript と HTML のハーフみたいな書き方に始めは結構戸惑ったが、慣れるとかなり合理的な書き方に思える。条件的に HTML 要素を表示したりするのを素の HTML と JS で行おうとすれば結構面倒くさいが、JSX ならかなりスマートに書ける。\\n　ちなみに、2 ヶ月ほど前 Gatsby でこのブログを制作した時に JSX に出会い「めっちゃええやん」と思い React を学ぼうと決意した経緯がある。\"}),\"\\n\",n(c.h3,{id:\"props-vs-state\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#props-vs-state\",children:\"Props VS State\"})}),\"\\n\",n(c.p,{children:\"最初は戸惑ったが、\\nState :　そのコンポーネントが有する「状態」\\nProps : 親コンポーネントからもらった「プロパティー」\"}),\"\\n\",n(c.p,{children:\"という風に割とシンプルに理解。\"}),\"\\n\",n(c.h3,{id:\"redux\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#redux\",children:\"Redux\"})}),\"\\n\",n(c.p,{children:\"コンポーネント間でのデータのやりとりが複雑化してくれば必須のライブラリらしい。色々 dispatch してデータを動かす。これが結構ややこしくて途中から「逆に Redux が複雑化させてね？」と思っていた。\"}),\"\\n\",n(c.h3,{id:\"test\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#test\",children:\"Test\"})}),\"\\n\",n(c.p,{children:\"Jest, Enzyme を使ったテスト環境の構築。めっちゃ時間かかる。けど、規模が大きく慣ればなるほどそのありがたみが増すのはわかる。\"}),\"\\n\",n(c.h3,{id:\"webpack\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#webpack\",children:\"Webpack\"})}),\"\\n\",n(c.p,{children:\"このコースのなかで一番「なんでこれをしなくてはいけないのか」がわからない要素だった。特に css-loader とか、entrypoint とか。\"}),\"\\n\",n(c.h3,{id:\"firebase\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#firebase\",children:\"Firebase\"})}),\"\\n\",n(c.p,{children:\"すごい便利。データベースとユーザー認証をしてくれる。かなり使い道がありそう。\"}),\"\\n\",n(c.h3,{id:\"hooks\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#hooks\",children:\"Hooks\"})}),\"\\n\",n(c.p,{children:\"Redux よりこっちの方が印象が良い。\"}),\"\\n\",n(c.h2,{id:\"総評\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#総評\",children:\"総評\"})}),\"\\n\",n(c.p,{children:\"Andrew の説明は本当にわかりやすい。そしてやっぱり React は最高だと思う。\\nそれと、React を書いていて思ったのが、結局は React も JS のライブラリだということ。JS のメソッドや考え方をきちんと理解していないと、「React がわからないのか JS がわからないのか問題」が発生してさらにごちゃごちゃな状況になりそう。\\n先になると思うが Node.js を学びたいと思っているので、これからも JS の基礎力みたいなものは伸ばしていきたい。\"})]})}return{default:function(e={}){const{wrapper:a}=e.components||{};return a?n(a,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2021/01/udemy-react-course/udemy-react-course"
  },
  {
    "slug": "blog/2021/03/20210308-udemy-js-course/20210308-udemy-js-course",
    "title": "今まで受講したJS関連のUdemyコースまとめ",
    "date": "2021-03-08T00:00:00.000Z",
    "tags": [
      "Programming"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(c){const i={a:\"a\",h2:\"h2\",p:\"p\",...c.components};return r(e,{children:[n(i.h2,{id:\"独学は不利ではない\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#独学は不利ではない\",children:\"独学は不利ではない\"})}),\"\\n\",n(i.p,{children:\"僕は今まで半年ほど、MERNstackを中心にWeb開発の学習をしてきました。本は一切買わずに、ずっとUdemyの動画で学習 + わからないところは公式ドキュメントやQittaなどで調べるスタイルで。\"}),\"\\n\",n(i.p,{children:\"動画とネット記事で学習するスタイルは結構気に入っていて、これからプログラミングを学習したいという方には是非オススメしたいです。\"}),\"\\n\",n(i.p,{children:\"最近初めてチーム開発をする機会があり、僕以外の4人のチームメイトアメリカ人で、全員プログラムング・ブートキャンプという日本のプログラミングスクールのような場所でプログラミングを学んだ背景を持つ実務未経験者でした。\"}),\"\\n\",n(i.p,{children:\"チーム開発を始める前の初めてのチームミーティングでそれを聞いて、唯一の独学勢だった僕はチームのレベルについて行けるか不安でした。しかし蓋を開けてみると、殆どのチームメイトより僕の方がコーディングの知識があるということがわかりました。\"}),\"\\n\",n(i.p,{children:'例えばあるチームメイトがReactでフロントエンドを構築していて、よくあるエラー(\"Each child must have unique key\"みたいなやつ)に対面して「これどうしよう！？」みたいなことをチャットしてきた時。この程度のエラーならエラー文をそのままググって最初のリンクをクリックしたら答えが出てきますが、「ブートキャンプだとググる前にチューターに質問してしまうのかな」と思ってstackoverflowのリンクを送りました。'}),\"\\n\",n(i.p,{children:\"独学は、スクールのようにカリキュラムが存在しないので、プログラミングに必要な知識を体系的に学ぶという点に於いては不利かもしれませんが、何が起こっても自分で解決しないといけないので、スクール勢より自走力がつくと思います。\"}),\"\\n\",n(i.p,{children:\"どこで勉強するのかがその人の成長にどの程度影響を与えるのかについては、僕はまだよくわかりません。けれども僕は今回のチーム開発でスクールで勉強している人に対する引け目、劣等感のようなものを払拭することが出来ました。\"}),\"\\n\",n(i.h2,{id:\"僕が受講したudemyの講座\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#僕が受講したudemyの講座\",children:\"僕が受講したUdemyの講座\"})}),\"\\n\",n(i.p,{children:\"僕はMERN Stack(MongoDB, Express, React, Node.js)を中心にWeb開発の学習をすすめていて、学習のために受講したUdemyのコースを軽く紹介したいとおもいます。全て英語の教材です。\"}),\"\\n\",n(i.h2,{id:\"javascript\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#javascript\",children:\"Javascript\"})}),\"\\n\",n(i.p,{children:n(i.a,{href:\"https://www.udemy.com/course/the-complete-javascript-course/\",children:\"The Complete JavaScript Course 2021: From Zero to Expert!\"})}),\"\\n\",n(i.p,{children:\"再生時間: 68時間\"}),\"\\n\",n(i.p,{children:\"かなりボリューミーなJavaScriptのコース。TwitterとかでもJSはこれで勉強している人をたまに見かけるほど人気。講師のJonasさんはポルトガル人で、英語も変な癖もなくゆっくり喋ってくれるのでとてもわかりやすい。\"}),\"\\n\",n(i.p,{children:\"コスパでいうならこのコースはこの記事のリストにある他のどのコースよりも高い。単純に再生時間が長いだけではなく、全体的に深く広く作り込まれている。僕はProgateでJSを10時間ぐらい勉強してからこのコースを始めたが、そんなのも必要なかったぐらい初心者にも優しい教材だ。\"}),\"\\n\",n(i.p,{children:\"JSについてCallstackやEventloopなどのエンジンについてまで時間をかけて説明すること、プロジェクトも質・量的に充実していることから「From Zero to Expert!」という副題は伊達では無い。かなり頻繁に「自分でコーディングしてみよう」チャレンジがあり、それもあってこのコースは再生時間は70時間だが、終わらせるのには多分殆どの初学者には100時間以上必要になる。ちなみに僕は2倍速で再生して100時間ほどかかった。\"}),\"\\n\",n(i.p,{children:\"JSの基礎をきっちり固めたいという人にはこのコースをオススメできるが「JSはサラッと学習してReactとかVueにさっさと進みたい」という人にはこのコースは長すぎるかもしれない。\"}),\"\\n\",n(i.p,{children:\"JSの基礎を一度しっかりやっていくことには価値があると思ったので、僕にはこのコースは有り難かったです。非常にオススメ。\"}),\"\\n\",n(i.h2,{id:\"html--css\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#html--css\",children:\"HTML & CSS\"})}),\"\\n\",n(i.p,{children:n(i.a,{href:\"https://www.udemy.com/course/modern-html-css-from-the-beginning/\",children:\"Modern HTML & CSS From The Beginning (Including Sass)\"})}),\"\\n\",n(i.p,{children:\"再生時間: 21時間\"}),\"\\n\",r(i.p,{children:[\"Yotubeの\",n(i.a,{href:\"https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA\",children:\"Traversy Media\"}),\"さんのHTML & CSSのコース。彼のYouTubeの無料コンテンツはたまに見ていて、信頼出来そうだと思い購入。HTML & CSSについてはこのコースを学ぶ以前にProgateでサラっと触ってはいたのですが、身についた実感が無かったのでもう少し学習する必要性を感じていました。\"]}),\"\\n\",n(i.p,{children:\"プロジェクトを作りながら学習するコースで、Bradの説明はたまにタイピング速すぎてついていけない時がありますがわかりやすいです。実際に彼が開発する際に使っているプラグインとかツールなども紹介してくれるのでその辺りも初学者には有り難かったです。\"}),\"\\n\",n(i.p,{children:\"このコースを終わらせれば、LPならだいたいどんな風に実装すれば良いのかイメージは付くようになると思います。\"}),\"\\n\",n(i.h2,{id:\"react\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#react\",children:\"React\"})}),\"\\n\",n(i.p,{children:n(i.a,{href:\"https://www.udemy.com/course/react-2nd-edition/\",children:\"The Complete React Developer Course (w/ Hooks and Redux)\"})}),\"\\n\",n(i.p,{children:\"再生時間: 40時間\"}),\"\\n\",n(i.p,{children:\"Andrew MeadさんのYoutubeのチュートリアルがきっかけで購入。この人のコースはとにかく「間違いない」感がある。喋るスピード・リズム感とか、定期的にコードを整理してくれる所とか、他の典型的なエンジニア講師にはない丁寧さが彼の売りで、ぼくはそれが好きだ。このコースもかなり「自分で書いてみようチャレンジ」が多く、このチュートリアルを終えた後にも自走できるような配慮がなされている。\"}),\"\\n\",n(i.p,{children:\"懸念点としたらReduxとJestにかなり時間を割いているということ、それらを勉強したくないと思っている人にとっては無駄な時間かも。\"}),\"\\n\",n(i.h2,{id:\"nodejs\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#nodejs\",children:\"Node.js\"})}),\"\\n\",n(i.p,{children:n(i.a,{href:\"https://www.udemy.com/course/the-complete-nodejs-developer-course-2/\",children:\"The Complete Node.js Developer Course (3rd Edition)\"})}),\"\\n\",n(i.p,{children:\"再生時間: 35時間\"}),\"\\n\",n(i.p,{children:\"これもAndrew Meadさんのコース。多分単純に僕は彼の説明が好みなんだろうな。一定のリズムで淡々とやってくれていて、動画の分け方とか合理的で、あとで振り返る時とかも復習がしやすい。\"}),\"\\n\",n(i.p,{children:\"ただこのNodeのコースは少し古いというのと、最後のプロジェクトが結構中途半端な所で終わるのが気になった。それでも価格分の価値は全然ある。\"}),\"\\n\",n(i.h2,{id:\"typescript\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typescript\",children:\"TypeScript\"})}),\"\\n\",n(i.p,{children:n(i.a,{href:\"https://www.udemy.com/course/understanding-typescript/\",children:\"Understanding TypeScript - 2021 Edition\"})}),\"\\n\",n(i.p,{children:\"再生時間: 15時間\"}),\"\\n\",n(i.p,{children:\"Maximillianさんのコース。2021年現在、TypeScriptを学ぶコース自体がUdemyにはあまりない。たまに何を言っているのかわからなくなる時があり、結局公式ドキュメントを読むことが多い。好みによるのかもしれないが、僕はちょっと彼の説明は肌に合わなかった。\"}),\"\\n\",n(i.h2,{id:\"まとめ\",children:n(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",n(i.p,{children:\"動画で何かを学習するということはプログラミングが始めてだった。Web開発の学習のために今後さらにUdemyを多用するかはわからないが、なにか他の分野の学習に使ってみたい。\"})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2021/03/20210308-udemy-js-course/20210308-udemy-js-course"
  },
  {
    "slug": "blog/2021/11/20211101-neovim-config/20211101-neovim-config",
    "title": "Neovimを導入してVSCode上で同じショートカットを使えるようにした",
    "date": "2021-11-01T00:00:00.000Z",
    "tags": [
      "vim"
    ],
    "body": "const{Fragment:e,jsx:n,jsxs:i}=arguments[0];function _createMdxContent(h){const c={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",ul:\"ul\",...h.components};return i(e,{children:[n(c.h2,{id:\"はじいに\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#はじいに\",children:\"はじいに\"})}),\"\\n\",n(c.p,{children:\"コマンドライン上での生産性を上げるために前から興味のあったVim(NeoVim)を導入しました。結構プラグインもいれてシェルではかなり快適に操作できるようになったのですが、VSCode上でも同じようにしたいと思い、VSCode上でもVimと同じショートカット、さらにはwhich-keyなどのプラグインも使えるようにしたのでメモを残したいと思います。\"}),\"\\n\",n(c.h3,{id:\"プラグイン\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#プラグイン\",children:\"プラグイン\"})}),\"\\n\",i(c.p,{children:[n(c.a,{href:\"https://github.com/junegunn/vim-plug\",children:\"Vimplug\"}),\"を使いNeovimにプラグインをいくつかインストールしました。\"]}),\"\\n\",i(c.ul,{children:[\"\\n\",n(c.li,{children:n(c.a,{href:\"https://github.com/junegunn/fzf\",children:\"FuzzyFinder\"})}),\"\\n\",n(c.li,{children:n(c.a,{href:\"https://github.com/tpope/vim-fugitive\",children:\"vim-fugitive\"})}),\"\\n\",n(c.li,{children:n(c.a,{href:\"https://www.google.com/search?q=vim+git+gutter&oq=vim+git+gutter&aqs=chrome..69i57.419730j0j4&sourceid=chrome&ie=UTF-8\",children:\"Vim-gitgutter\"})}),\"\\n\",n(c.li,{children:n(c.a,{href:\"https://github.com/tpope/vim-commentary\",children:\"vim comentary\"})}),\"\\n\",n(c.li,{children:n(c.a,{href:\"https://github.com/sheerun/vim-polyglot\",children:\"vim-polyglot\"})}),\"\\n\",n(c.li,{children:n(c.a,{href:\"https://github.com/neoclide/coc.nvim\",children:\"coc-nvm\"})}),\"\\n\"]}),\"\\n\",n(c.p,{children:\"などなど、ちょっと多すぎるので割愛します。\"}),\"\\n\",n(c.h2,{id:\"vscodeとの連携\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#vscodeとの連携\",children:\"VSCodeとの連携\"})}),\"\\n\",i(c.p,{children:[\"VS extentionの neoVimをインストールして、neovimとそのconfigのpathを指定してあげます。それらかVSCode上の\",n(c.code,{children:\"keybindins.json\"}),\"と\",n(c.code,{children:\"setting.json\"}),\"にvimのコマンドを追加しました。\"]}),\"\\n\",i(c.p,{children:[\"Neovim側のconfigとしましては、VS codeが立ち上がっているときは別の\",n(c.code,{children:\".vim\"}),\"ファイルから設定が読み込まれるようにしました。一部動作しないコマンドもありますが、許容範囲内なのでOKとします。\"]}),\"\\n\",n(c.h2,{id:\"まとめ\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#まとめ\",children:\"まとめ\"})}),\"\\n\",n(c.p,{children:\"今までVimを導入しなかた理由はVSCodeに慣れすぎていたのが理由でしたが、コマンドライン上とVSCode上で同じコマンドを使えるなら導入しない理由はないと思い今回の導入に至りました。\"}),\"\\n\",n(c.p,{children:\"まだまだVimのショートカット自体は学習中ですが、マウスを使う機会がすごく減ったのは楽しいです。\"}),\"\\n\",n(c.h2,{id:\"参考\",children:n(c.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参考\",children:\"参考\"})}),\"\\n\",i(c.ul,{children:[\"\\n\",n(c.li,{children:n(c.a,{href:\"https://www.udemy.com/course/vim-tmux-zsh/\",children:\"Udemy :シリコンバレー現役エンジニアが教える NeoVim(VIM) + Tmux + Zsh 入門\"})}),\"\\n\"]}),\"\\n\",n(c.p,{children:\"このコースは手短にVimやTmuxのセットアップを教えてくれるのでおすすめです。\"}),\"\\n\",i(c.ul,{children:[\"\\n\",n(c.li,{children:n(c.a,{href:\"https://www.youtube.com/watch?v=g4dXZ0RQWdw&t=25s\",children:\"VSCode with embedded Neovim\"})}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:i}=e.components||{};return i?n(i,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slugAsParams": "2021/11/20211101-neovim-config/20211101-neovim-config"
  },
  {
    "slug": "blog/2022/11/20221113/20221113",
    "title": "CSSでフワッとアニメーション",
    "date": "2022-02-13T00:00:00.000Z",
    "tags": [
      "CSS"
    ],
    "body": "const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(i){const r={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...i.components};return a(n,{children:[e(r.p,{children:\"ページ読み込み時にフワッとロードする方法\"}),\"\\n\",e(\"iframe\",{src:\"https://giphy.com/embed/YmBolYnjtFj1pkvtfb\",width:\"480\",height:\"309\",frameBorder:\"0\",class:\"giphy-embed\",allowFullScreen:!0}),\"\\n\",e(\"p\",{children:e(\"a\",{href:\"https://giphy.com/gifs/YmBolYnjtFj1pkvtfb\",children:\"via GIPHY\"})}),\"\\n\",e(r.p,{children:\"数行のCSSで達成することができる\"}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-html\",children:'<body>\\n  <div id=\"header1\">\\n    <h1>Header 1</h1>\\n    <p>Some text</p>\\n  </div>\\n   <div id=\"header2\">\\n    <h1>Header 2</h1>\\n    <p>Some text</p>\\n  </div>\\n   <div id=\"header3\">\\n    <h1>Header 3</h1>\\n    <p>Some text</p>\\n  </div>\\n</body>\\n'})}),\"\\n\",e(r.p,{children:\"こういうHTMLがあるとします。\"}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-css\",children:\"@keyframes fadeIn {\\n  0% {\\n      opacity: 0\\n  }\\n  100% {\\n      opacity: 1\\n  }\\n}\\n#header1{\\n  animation: fadeIn .3s ease-in 0s 1 normal;\\n}\\n#header2 {\\n  animation: fadeIn .9s ease-in 0s 1 normal;\\n}\\n#header3 {\\n  animation: fadeIn 1.5s ease-in 0s 1 normal;\\n}\\n\"})}),\"\\n\",e(r.p,{children:\"Divごとにアニメーションの速度を設定します。\\n全体をフワッとさせたければBodyに追加すればOKです。\"}),\"\\n\",e(r.h2,{id:\"keyframeで動きの変化を指定\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#keyframeで動きの変化を指定\",children:\"keyframeで動きの変化を指定\"})}),\"\\n\",a(r.p,{children:[e(r.code,{children:\"@keyframe\"}),\"とはアットルールの一種でCSSの動作を規定するものです。\\n上述のCSSの\",e(r.code,{children:\"0%\"}),\"と\",e(r.code,{children:\"100%\"}),\"をそれぞれ\",e(r.code,{children:\"from\"}),\"と\",e(r.code,{children:\"to\"}),\"に変換することもできます。FadeInはアニメーショの定義名です。\"]}),\"\\n\",e(r.h2,{id:\"animation\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#animation\",children:\"animation\"})}),\"\\n\",e(r.p,{children:e(r.code,{children:\"animation: fadeIn .3s ease-in 0s 1 normal;\"})}),\"\\n\",e(r.p,{children:\"↓\"}),\"\\n\",e(r.p,{children:e(r.code,{children:\"animation: 定義名 変化時間 進行具合 ループ 交互に反対再生させるか;\"})}),\"\\n\",e(r.h2,{id:\"参照\",children:e(r.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#参照\",children:\"参照\"})}),\"\\n\",a(r.ul,{children:[\"\\n\",e(r.li,{children:e(r.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation\",children:\"animation - CSS: Cascading Style Sheets | MDN\"})}),\"\\n\",a(r.li,{children:[e(r.a,{href:\"https://www.w3schools.com/css/css3_animations.asp\",children:\"Site Unreachable\"}),\"\\n\",e(r.a,{href:\"https://coco-factory.jp/ugokuweb/css02/\",children:\"CSSアニメーションで動きを指定しよう | 動くWebデザインアイディア帳\"})]}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};",
    "slugAsParams": "2022/11/20221113/20221113"
  }
]